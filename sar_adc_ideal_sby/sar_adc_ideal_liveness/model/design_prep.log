
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34+14 (git sha1 11b9deba9, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `design_prep.ys' --

1. Executing RTLIL frontend.
Input filename: design.il

2. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module sar_tb_working.
Found 0 SCCs in module sar_adc__N_BITS_10.
Found 0 SCCs in module sample_and_hold.
Found 0 SCCs in module digital_to_analog_converter.
Found 0 SCCs in module comparator_latch.
Found 0 SCCs in module $paramod\successive_approximation_register\N_BITS=s32'00000000000000000000000000001010.
Found 0 SCCs in module $paramod\sar_adc\N_BITS=s32'00000000000000000000000000001010.
Found 0 SCCs in module $paramod\frequency_divider\DIVISION=s32'00000000000000000000000000000010.
Found 0 SCCs.

3. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4. Executing MEMORY_NORDFF pass (extracting $dff cells from memories).

5. Executing CLK2FFLOGIC pass (convert clocked FFs to generic $ff cells).
Replacing sar_tb_working.$procdff$451 ($dff): CLK=\clk, D=$0\cycles[63:0], Q=\cycles
Replacing sar_tb_working.$procdff$450 ($dff): CLK=\sys_clk, D=$0\sys_counter[31:0], Q=\sys_counter
Replacing sar_tb_working.$procdff$447 ($dff): CLK=\sys_clk, D=$0$formal$sar_adc_ideal_conv.sv:89$22_CHECK[0:0]$58, Q=$formal$sar_adc_ideal_conv.sv:89$22_CHECK
Replacing sar_tb_working.$procdff$446 ($dff): CLK=\sys_clk, D=1'1, Q=$formal$sar_adc_ideal_conv.sv:87$21_EN
Replacing sar_tb_working.$procdff$445 ($dff): CLK=\sys_clk, D=$0$formal$sar_adc_ideal_conv.sv:87$21_CHECK[0:0]$56, Q=$formal$sar_adc_ideal_conv.sv:87$21_CHECK
Replacing sar_tb_working.$procdff$444 ($dff): CLK=\sys_clk, D=$0\eoc_high_counter[31:0], Q=\eoc_high_counter
Replacing sample_and_hold.$procdff$429 ($dff): CLK=\clk, D=$0\fsm[31:0], Q=\fsm
Replacing sample_and_hold.$procdff$428 ($dff): CLK=\clk, D=$0\state_cap[9:0], Q=\state_cap
Replacing comparator_latch.$procdff$440 ($dff): CLK=\clk, D=\sys_clk, Q=\prev_sys_clk
Replacing comparator_latch.$procdff$439 ($dff): CLK=\clk, D=$0\fsm[31:0], Q=\fsm
Replacing comparator_latch.$procdff$438 ($dff): CLK=\clk, D=$0\o[34:0], Q=\o
Replacing comparator_latch.$procdff$437 ($dff): CLK=\clk, D=$0\state_cycle_counter[16:0], Q=\state_cycle_counter
Replacing $paramod\successive_approximation_register\N_BITS=s32'00000000000000000000000000001010.$procdff$436 ($dff): CLK=\sys_clk, D=$0\counter[4:0], Q=\counter
Replacing $paramod\successive_approximation_register\N_BITS=s32'00000000000000000000000000001010.$procdff$431 ($dff): CLK=\sys_clk, D=$0$lookahead\quantized_voltage_register$221[9:0]$226, Q=\quantized_voltage_register
Replacing $paramod\sar_adc\N_BITS=s32'00000000000000000000000000001010.$procdff$441 ($dff): CLK=\clk, D=$0\comparator_output_digital[0:0], Q=\comparator_output_digital
Replacing $paramod\frequency_divider\DIVISION=s32'00000000000000000000000000000010.$procdff$443 ($dff): CLK=\input_clk_digital, D=$0\counter[31:0], Q=\counter
Replacing $paramod\frequency_divider\DIVISION=s32'00000000000000000000000000000010.$procdff$442 ($dff): CLK=\input_clk_digital, D=$0\output_clk_digital[0:0], Q=\output_clk_digital

6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sar_tb_working..
Finding unused cells or wires in module \sar_adc__N_BITS_10..
Finding unused cells or wires in module \sample_and_hold..
Finding unused cells or wires in module \digital_to_analog_converter..
Finding unused cells or wires in module \comparator_latch..
Finding unused cells or wires in module $paramod\successive_approximation_register\N_BITS=s32'00000000000000000000000000001010..
Finding unused cells or wires in module $paramod\sar_adc\N_BITS=s32'00000000000000000000000000001010..
Finding unused cells or wires in module $paramod\frequency_divider\DIVISION=s32'00000000000000000000000000000010..
Removed 0 unused cells and 17 unused wires.
<suppressed ~6 debug messages>

7. Executing FORMALFF pass.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\frequency_divider\DIVISION=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\sar_adc\N_BITS=s32'00000000000000000000000000001010..
Finding unused cells or wires in module $paramod\successive_approximation_register\N_BITS=s32'00000000000000000000000000001010..
Finding unused cells or wires in module \comparator_latch..
Finding unused cells or wires in module \digital_to_analog_converter..
Finding unused cells or wires in module \sample_and_hold..
Finding unused cells or wires in module \sar_adc__N_BITS_10..
Finding unused cells or wires in module \sar_tb_working..

9. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\frequency_divider\DIVISION=s32'00000000000000000000000000000010...
Checking module $paramod\sar_adc\N_BITS=s32'00000000000000000000000000001010...
Checking module $paramod\successive_approximation_register\N_BITS=s32'00000000000000000000000000001010...
Checking module comparator_latch...
Checking module digital_to_analog_converter...
Checking module sample_and_hold...
Checking module sar_adc__N_BITS_10...
Checking module sar_tb_working...
Found and reported 0 problems.

10. Executing SETUNDEF pass (replace undef values with defined constants).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\frequency_divider\DIVISION=s32'00000000000000000000000000000010.
<suppressed ~2 debug messages>
Optimizing module $paramod\sar_adc\N_BITS=s32'00000000000000000000000000001010.
Optimizing module $paramod\successive_approximation_register\N_BITS=s32'00000000000000000000000000001010.
<suppressed ~3 debug messages>
Optimizing module comparator_latch.
<suppressed ~14 debug messages>
Optimizing module digital_to_analog_converter.
<suppressed ~3 debug messages>
Optimizing module sample_and_hold.
Optimizing module sar_adc__N_BITS_10.
Optimizing module sar_tb_working.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\frequency_divider\DIVISION=s32'00000000000000000000000000000010'.
<suppressed ~6 debug messages>
Finding identical cells in module `$paramod\sar_adc\N_BITS=s32'00000000000000000000000000001010'.
Finding identical cells in module `$paramod\successive_approximation_register\N_BITS=s32'00000000000000000000000000001010'.
<suppressed ~6 debug messages>
Finding identical cells in module `\comparator_latch'.
<suppressed ~18 debug messages>
Finding identical cells in module `\digital_to_analog_converter'.
Finding identical cells in module `\sample_and_hold'.
<suppressed ~6 debug messages>
Finding identical cells in module `\sar_adc__N_BITS_10'.
Finding identical cells in module `\sar_tb_working'.
<suppressed ~24 debug messages>
Removed a total of 20 cells.

11.3. Executing OPT_DFF pass (perform DFF optimizations).

11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\frequency_divider\DIVISION=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\sar_adc\N_BITS=s32'00000000000000000000000000001010..
Finding unused cells or wires in module $paramod\successive_approximation_register\N_BITS=s32'00000000000000000000000000001010..
Finding unused cells or wires in module \comparator_latch..
Finding unused cells or wires in module \digital_to_analog_converter..
Finding unused cells or wires in module \sample_and_hold..
Finding unused cells or wires in module \sar_adc__N_BITS_10..
Finding unused cells or wires in module \sar_tb_working..
Removed 132 unused cells and 155 unused wires.
<suppressed ~139 debug messages>

11.5. Finished fast OPT passes.

12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\frequency_divider\DIVISION=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\sar_adc\N_BITS=s32'00000000000000000000000000001010..
Finding unused cells or wires in module $paramod\successive_approximation_register\N_BITS=s32'00000000000000000000000000001010..
Finding unused cells or wires in module \comparator_latch..
Finding unused cells or wires in module \digital_to_analog_converter..
Finding unused cells or wires in module \sample_and_hold..
Finding unused cells or wires in module \sar_adc__N_BITS_10..
Finding unused cells or wires in module \sar_tb_working..

13. Executing RTLIL backend.
Output filename: ../model/design_prep.il

End of script. Logfile hash: 405db2b631, CPU: user 0.19s system 0.01s, MEM: 18.16 MB peak
Yosys 0.34+14 (git sha1 11b9deba9, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 46% 4x opt_clean (0 sec), 14% 1x check (0 sec), ...
