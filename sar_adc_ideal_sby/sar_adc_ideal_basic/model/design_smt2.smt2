; SMT-LIBv2 description generated by Yosys 0.34+14 (git sha1 11b9deba9, clang 10.0.0-4ubuntu1 -fPIC -Os)
; yosys-smt2-module $paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010
(declare-sort |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s| 0)
(declare-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_is| (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|) Bool)
(declare-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#0| (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n reset| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#0| state))
; yosys-smt2-anyinit $paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#1 1 $auto$clk2fflogic.cc:95:sample_data$556
; yosys-smt2-witness {"offset": 0, "path": ["\\output_clk_digital"], "smtname": 1, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#1| (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$\output_clk_digital#sampled$555
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\output_clk_digital[0:0]#sampled$557"], "smtname": 2, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#2| (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$0\output_clk_digital[0:0]#sampled$557
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:74:sample_control_edge$\\input_clk_digital#sampled$549"], "smtname": 3, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#3| (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:74:sample_control_edge$\input_clk_digital#sampled$549
(declare-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#4| (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|) (_ BitVec 1)) ; \input_clk_digital
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#5| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (= (concat (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#3| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#4| state)) #b01)) ; $auto$rtlil.cc:2501:Eqx$552
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#6| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) (_ BitVec 1) (ite (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#5| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#2| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#1| state))) ; \output_clk_digital
; yosys-smt2-output output_clk_digital 1
; yosys-smt2-wire output_clk_digital 1
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n output_clk_digital| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (= ((_ extract 0 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#6| state)) #b1))
; yosys-smt2-input input_clk_digital 1
; yosys-smt2-wire input_clk_digital 1
; yosys-smt2-witness {"offset": 0, "path": ["\\input_clk_digital"], "smtname": "input_clk_digital", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n input_clk_digital| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (= ((_ extract 0 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#4| state)) #b1))
; yosys-smt2-anyinit $paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#7 32 $auto$clk2fflogic.cc:95:sample_data$546
; yosys-smt2-witness {"offset": 0, "path": ["\\counter"], "smtname": 7, "smtoffset": 0, "type": "init", "width": 32}
(declare-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#7| (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|) (_ BitVec 32)) ; $auto$clk2fflogic.cc:88:sample_data$\counter#sampled$545
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\counter[31:0]#sampled$547"], "smtname": 8, "smtoffset": 0, "type": "reg", "width": 32}
(declare-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#8| (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|) (_ BitVec 32)) ; $auto$clk2fflogic.cc:88:sample_data$$0\counter[31:0]#sampled$547
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) (_ BitVec 32) (ite (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#5| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#8| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#7| state))) ; \counter
; yosys-smt2-wire counter 32
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n counter| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) (_ BitVec 32) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state))
(declare-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#10| (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n clk| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#10| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/output_clk_digital#sampled$555 1
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n $auto$clk2fflogic.cc:88:sample_data$/output_clk_digital#sampled$555| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (= ((_ extract 0 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#1| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/counter#sampled$545 32
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n $auto$clk2fflogic.cc:88:sample_data$/counter#sampled$545| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) (_ BitVec 32) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#7| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/output_clk_digital[0:0]#sampled$557 1
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n $auto$clk2fflogic.cc:88:sample_data$$0/output_clk_digital[0:0]#sampled$557| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (= ((_ extract 0 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#2| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/counter[31:0]#sampled$547 32
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n $auto$clk2fflogic.cc:88:sample_data$$0/counter[31:0]#sampled$547| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) (_ BitVec 32) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#8| state))
; yosys-smt2-register $auto$clk2fflogic.cc:74:sample_control_edge$/input_clk_digital#sampled$549 1
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n $auto$clk2fflogic.cc:74:sample_control_edge$/input_clk_digital#sampled$549| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (= ((_ extract 0 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#3| state)) #b1))
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#11| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (not (or  (= ((_ extract 0 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 1 1) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 2 2) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 3 3) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 4 4) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 5 5) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 6 6) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 7 7) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 8 8) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 9 9) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 10 10) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 11 11) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 12 12) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 13 13) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 14 14) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 15 15) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 16 16) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 17 17) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 18 18) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 19 19) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 20 20) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 21 21) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 22 22) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 23 23) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 24 24) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 25 25) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 26 26) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 27 27) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 28 28) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 29 29) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 30 30) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1) (= ((_ extract 31 31) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b1)))) ; $0$formal$sar_adc_ideal_conv.sv:139$163_CHECK[0:0]$175
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#12| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_is| state)) ; $0$formal$sar_adc_ideal_conv.sv:139$163_EN[0:0]$176
; yosys-smt2-assume 0 $assume$sar_adc_ideal_conv.sv:139$173 sar_adc_ideal_conv.sv:139.8-139.29
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_u 0| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (or (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#11| state) (not (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#12| state)))) ; $assume$sar_adc_ideal_conv.sv:139$173
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#13| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) (_ BitVec 32) (bvadd (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state) #b00000000000000000000000000000001)) ; $add$sar_adc_ideal_conv.sv:146$168_Y
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#14| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (distinct (concat ((_ extract 30 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b0) #b00000000000000000000000000000010)) ; $ne$sar_adc_ideal_conv.sv:145$167_Y
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#15| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) (_ BitVec 32) (ite (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#14| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#13| state) #b00000000000000000000000000000000)) ; $0\counter[31:0]
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#16| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (not (or  (= ((_ extract 0 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#6| state)) #b1) false))) ; $logic_not$sar_adc_ideal_conv.sv:152$172_Y
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#17| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (= (concat ((_ extract 30 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state)) #b0) #b00000000000000000000000000000010)) ; $eq$sar_adc_ideal_conv.sv:152$171_Y
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#18| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) (_ BitVec 1) (ite (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#17| state) (ite (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#16| state) #b1 #b0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#6| state))) ; $0\output_clk_digital[0:0]
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_a| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool true)
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_u| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool 
  (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_u 0| state)
)
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_i| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (and
  (= (= ((_ extract 0 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#2| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$0/output_clk_digital[0:0]#sampled$557
  (= (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#8| state) #b00000000000000000000000000000000) ; $auto$clk2fflogic.cc:88:sample_data$$0/counter[31:0]#sampled$547
  (= (= ((_ extract 0 0) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#3| state)) #b1) true) ; $auto$clk2fflogic.cc:74:sample_control_edge$/input_clk_digital#sampled$549
))
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_h| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool true)
(define-fun |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_t| ((state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|) (next_state |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)) Bool (and
  (= (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#15| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#8| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$548 $auto$clk2fflogic.cc:88:sample_data$$0\counter[31:0]#sampled$547
  (= (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#9| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#7| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$546 $auto$clk2fflogic.cc:88:sample_data$\counter#sampled$545
  (= (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#4| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#3| next_state)) ; $auto$clk2fflogic.cc:79:sample_control_edge$550 $auto$clk2fflogic.cc:74:sample_control_edge$\input_clk_digital#sampled$549
  (= (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#18| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#2| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$558 $auto$clk2fflogic.cc:88:sample_data$$0\output_clk_digital[0:0]#sampled$557
  (= (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#6| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010#1| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$556 $auto$clk2fflogic.cc:88:sample_data$\output_clk_digital#sampled$555
)) ; end of module $paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010
; yosys-smt2-module $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011
(declare-sort |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s| 0)
(declare-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_is| (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) Bool)
(declare-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#0| (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \sys_clk
; yosys-smt2-input sys_clk 1
; yosys-smt2-wire sys_clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\sys_clk"], "smtname": "sys_clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n sys_clk| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#0| state))
(declare-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#1| (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n reset| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#1| state))
; yosys-smt2-anyinit $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#2 3 $auto$clk2fflogic.cc:95:sample_data$536
; yosys-smt2-witness {"offset": 0, "path": ["\\quantized_voltage_register"], "smtname": 2, "smtoffset": 0, "type": "init", "width": 3}
(declare-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#2| (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 3)) ; $auto$clk2fflogic.cc:88:sample_data$\quantized_voltage_register#sampled$535
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0$lookahead\\quantized_voltage_register$196[2:0]$201#sampled$537"], "smtname": 3, "smtoffset": 0, "type": "reg", "width": 3}
(declare-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#3| (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 3)) ; $auto$clk2fflogic.cc:88:sample_data$$0$lookahead\quantized_voltage_register$196[2:0]$201#sampled$537
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:74:sample_control_edge$\\sys_clk#sampled$529"], "smtname": 4, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#4| (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:74:sample_control_edge$\sys_clk#sampled$529
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#5| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (= (concat (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#4| state) (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#0| state) #b1 #b0)) #b01)) ; $auto$rtlil.cc:2501:Eqx$532
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#6| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#5| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#3| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#2| state))) ; \quantized_voltage_register
; yosys-smt2-wire quantized_voltage_register 3
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n quantized_voltage_register| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#6| state))
; yosys-smt2-anyinit $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#7 3 $auto$clk2fflogic.cc:95:sample_data$526
; yosys-smt2-witness {"offset": 0, "path": ["\\counter"], "smtname": 7, "smtoffset": 0, "type": "init", "width": 3}
(declare-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#7| (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 3)) ; $auto$clk2fflogic.cc:88:sample_data$\counter#sampled$525
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\counter[2:0]#sampled$527"], "smtname": 8, "smtoffset": 0, "type": "reg", "width": 3}
(declare-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#8| (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 3)) ; $auto$clk2fflogic.cc:88:sample_data$$0\counter[2:0]#sampled$527
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#9| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#5| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#8| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#7| state))) ; \counter
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#10| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 32) (bvsub #b00000000000000000000000000000011 (concat #b000000000000000000000000000000 ((_ extract 2 1) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#9| state))))) ; $sub$./successive_approximation_register.v:35$209_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 32) (bvsub (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#10| state) #b00000000000000000000000000000001)) ; $sub$./successive_approximation_register.v:0$211_Y [31:0]
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#12| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (not (or  (= ((_ extract 0 0) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 1 1) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 2 2) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 3 3) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 4 4) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 5 5) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 6 6) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 7 7) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 8 8) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 9 9) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 10 10) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 11 11) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 12 12) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 13 13) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 14 14) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 15 15) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 16 16) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 17 17) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 18 18) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 19 19) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 20 20) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 21 21) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 22 22) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 23 23) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 24 24) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 25 25) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 26 26) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 27 27) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 28 28) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 29 29) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 30 30) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1) (= ((_ extract 31 31) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)) #b1)))) ; $eq$./successive_approximation_register.v:42$226_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#13| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 1) (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#12| state) #b1 ((_ extract 0 0) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#6| state)))) ; \quantized_voltage [0]
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#14| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (= (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state) #b00000000000000000000000000000001)) ; $eq$./successive_approximation_register.v:42$232_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#15| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 1) (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#14| state) #b1 ((_ extract 1 1) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#6| state)))) ; \quantized_voltage [1]
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#16| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (= (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state) #b00000000000000000000000000000010)) ; $eq$./successive_approximation_register.v:42$238_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#17| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 1) (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#16| state) #b1 ((_ extract 2 2) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#6| state)))) ; \quantized_voltage [2]
; yosys-smt2-output quantized_voltage 3
; yosys-smt2-wire quantized_voltage 3
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n quantized_voltage| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (concat (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#17| state) (concat (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#15| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#13| state))))
(declare-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#18| (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \feedback_value
; yosys-smt2-input feedback_value 1
; yosys-smt2-wire feedback_value 1
; yosys-smt2-witness {"offset": 0, "path": ["\\feedback_value"], "smtname": "feedback_value", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n feedback_value| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#18| state))
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#19| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (= (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#9| state) #b101)) ; $eq$./successive_approximation_register.v:46$241_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#20| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (not (or  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#1| state) false))) ; $logic_not$./successive_approximation_register.v:46$242_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#21| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (and (or  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#19| state) false) (or  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#20| state) false))) ; \eoc
; yosys-smt2-output eoc 1
; yosys-smt2-wire eoc 1
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n eoc| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#21| state))
; yosys-smt2-wire counter 3
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n counter| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#9| state))
(declare-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#22| (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \conduct_comparison
; yosys-smt2-input conduct_comparison 1
; yosys-smt2-wire conduct_comparison 1
; yosys-smt2-witness {"offset": 0, "path": ["\\conduct_comparison"], "smtname": "conduct_comparison", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n conduct_comparison| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#22| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/quantized_voltage_register#sampled$535 3
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n $auto$clk2fflogic.cc:88:sample_data$/quantized_voltage_register#sampled$535| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#2| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/counter#sampled$525 3
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n $auto$clk2fflogic.cc:88:sample_data$/counter#sampled$525| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#7| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/counter[2:0]#sampled$527 3
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n $auto$clk2fflogic.cc:88:sample_data$$0/counter[2:0]#sampled$527| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#8| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0$lookahead/quantized_voltage_register$196[2:0]$201#sampled$537 3
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n $auto$clk2fflogic.cc:88:sample_data$$0$lookahead/quantized_voltage_register$196[2:0]$201#sampled$537| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#3| state))
; yosys-smt2-register $auto$clk2fflogic.cc:74:sample_control_edge$/sys_clk#sampled$529 1
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n $auto$clk2fflogic.cc:74:sample_control_edge$/sys_clk#sampled$529| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (= ((_ extract 0 0) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#4| state)) #b1))
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#23| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (bvadd (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#9| state) #b001)) ; $add$./successive_approximation_register.v:26$195_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#24| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (distinct (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#9| state) #b101)) ; $ne$./successive_approximation_register.v:26$194_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#25| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#24| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#23| state) #b000)) ; $procmux$282_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#26| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#22| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#25| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#9| state))) ; $procmux$284_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#27| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#1| state) #b000 (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#26| state))) ; $0\counter[2:0]
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#28| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 33) (bvneg (concat #b0 (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#11| state)))) ; $neg$./successive_approximation_register.v:0$212_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#29| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) ((_ extract 2 0) (ite (bvsge (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#28| state) #b000000000000000000000000000000000) (bvlshr #b000000000000000000000000000000001 (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#28| state)) (bvshl #b000000000000000000000000000000001 (bvneg (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#28| state)))))) ; $shift$./successive_approximation_register.v:0$213_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#30| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (bvnot (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#29| state))) ; $not$./successive_approximation_register.v:0$218_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#31| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (bvand (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#6| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#30| state))) ; $and$./successive_approximation_register.v:0$219_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#32| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) ((_ extract 2 0) (ite (bvsge (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#28| state) #b000000000000000000000000000000000) (bvlshr (concat #b00000000000000000000000000000000 (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#18| state) #b1 #b0)) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#28| state)) (bvshl (concat #b00000000000000000000000000000000 (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#18| state) #b1 #b0)) (bvneg (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#28| state)))))) ; $shift$./successive_approximation_register.v:0$217_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#33| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (bvor (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#31| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#32| state))) ; $or$./successive_approximation_register.v:0$220_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#34| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (not (or  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#22| state) false))) ; $logic_not$./successive_approximation_register.v:32$202_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#35| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (or  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#1| state) false  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#34| state) false)) ; $logic_or$./successive_approximation_register.v:32$203_Y
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#36| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#35| state) #b000 (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#33| state))) ; $0$lookahead\quantized_voltage_register$196[2:0]$201
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_a| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool true)
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_u| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool true)
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_i| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (and
  (= (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#8| state) #b000) ; $auto$clk2fflogic.cc:88:sample_data$$0/counter[2:0]#sampled$527
  (= (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#3| state) #b000) ; $auto$clk2fflogic.cc:88:sample_data$$0$lookahead/quantized_voltage_register$196[2:0]$201#sampled$537
  (= (= ((_ extract 0 0) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#4| state)) #b1) true) ; $auto$clk2fflogic.cc:74:sample_control_edge$/sys_clk#sampled$529
))
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_h| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool true)
(define-fun |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_t| ((state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|) (next_state |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (and
  (= (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#27| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#8| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$528 $auto$clk2fflogic.cc:88:sample_data$$0\counter[2:0]#sampled$527
  (= (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#9| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#7| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$526 $auto$clk2fflogic.cc:88:sample_data$\counter#sampled$525
  (= (ite (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#0| state) #b1 #b0) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#4| next_state)) ; $auto$clk2fflogic.cc:79:sample_control_edge$530 $auto$clk2fflogic.cc:74:sample_control_edge$\sys_clk#sampled$529
  (= (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#36| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#3| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$538 $auto$clk2fflogic.cc:88:sample_data$$0$lookahead\quantized_voltage_register$196[2:0]$201#sampled$537
  (= (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#6| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011#2| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$536 $auto$clk2fflogic.cc:88:sample_data$\quantized_voltage_register#sampled$535
)) ; end of module $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011
; yosys-smt2-module comparator_latch
(declare-sort |comparator_latch_s| 0)
(declare-fun |comparator_latch_is| (|comparator_latch_s|) Bool)
; yosys-smt2-wire truncR_2 14
(define-fun |comparator_latch_n truncR_2| ((state |comparator_latch_s|)) (_ BitVec 14) #b00000000000000)
; yosys-smt2-wire truncR_0 13
(define-fun |comparator_latch_n truncR_0| ((state |comparator_latch_s|)) (_ BitVec 13) #b1000000000000)
; yosys-smt2-wire toUsInt_3 15
(define-fun |comparator_latch_n toUsInt_3| ((state |comparator_latch_s|)) (_ BitVec 15) #b000000000000000)
(declare-fun |comparator_latch#0| (|comparator_latch_s|) Bool) ; \sys_clk
; yosys-smt2-input sys_clk 1
; yosys-smt2-wire sys_clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\sys_clk"], "smtname": "sys_clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |comparator_latch_n sys_clk| ((state |comparator_latch_s|)) Bool (|comparator_latch#0| state))
(declare-fun |comparator_latch#1| (|comparator_latch_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |comparator_latch_n reset| ((state |comparator_latch_s|)) Bool (|comparator_latch#1| state))
(declare-fun |comparator_latch#2| (|comparator_latch_s|) (_ BitVec 10)) ; \p
; yosys-smt2-input p 10
; yosys-smt2-wire p 10
; yosys-smt2-witness {"offset": 0, "path": ["\\p"], "smtname": "p", "smtoffset": 0, "type": "input", "width": 10}
(define-fun |comparator_latch_n p| ((state |comparator_latch_s|)) (_ BitVec 10) (|comparator_latch#2| state))
; yosys-smt2-anyinit comparator_latch#3 32 $auto$clk2fflogic.cc:95:sample_data$516
; yosys-smt2-witness {"offset": 0, "path": ["\\fsm"], "smtname": 3, "smtoffset": 0, "type": "init", "width": 32}
(declare-fun |comparator_latch#3| (|comparator_latch_s|) (_ BitVec 32)) ; $auto$clk2fflogic.cc:88:sample_data$\fsm#sampled$515
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\fsm[31:0]#sampled$517"], "smtname": 4, "smtoffset": 0, "type": "reg", "width": 32}
(declare-fun |comparator_latch#4| (|comparator_latch_s|) (_ BitVec 32)) ; $auto$clk2fflogic.cc:88:sample_data$$0\fsm[31:0]#sampled$517
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:74:sample_control_edge$\\clk#sampled$519"], "smtname": 5, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |comparator_latch#5| (|comparator_latch_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:74:sample_control_edge$\clk#sampled$519
(declare-fun |comparator_latch#6| (|comparator_latch_s|) (_ BitVec 1)) ; \clk
(define-fun |comparator_latch#7| ((state |comparator_latch_s|)) Bool (= (concat (|comparator_latch#5| state) (|comparator_latch#6| state)) #b01)) ; $auto$rtlil.cc:2501:Eqx$522
(define-fun |comparator_latch#8| ((state |comparator_latch_s|)) (_ BitVec 32) (ite (|comparator_latch#7| state) (|comparator_latch#4| state) (|comparator_latch#3| state))) ; \fsm
(define-fun |comparator_latch#9| ((state |comparator_latch_s|)) Bool (not (or  (= ((_ extract 0 0) (|comparator_latch#8| state)) #b1) (= ((_ extract 1 1) (|comparator_latch#8| state)) #b1) (= ((_ extract 2 2) (|comparator_latch#8| state)) #b1) (= ((_ extract 3 3) (|comparator_latch#8| state)) #b1) (= ((_ extract 4 4) (|comparator_latch#8| state)) #b1) (= ((_ extract 5 5) (|comparator_latch#8| state)) #b1) (= ((_ extract 6 6) (|comparator_latch#8| state)) #b1) (= ((_ extract 7 7) (|comparator_latch#8| state)) #b1) (= ((_ extract 8 8) (|comparator_latch#8| state)) #b1) (= ((_ extract 9 9) (|comparator_latch#8| state)) #b1) (= ((_ extract 10 10) (|comparator_latch#8| state)) #b1) (= ((_ extract 11 11) (|comparator_latch#8| state)) #b1) (= ((_ extract 12 12) (|comparator_latch#8| state)) #b1) (= ((_ extract 13 13) (|comparator_latch#8| state)) #b1) (= ((_ extract 14 14) (|comparator_latch#8| state)) #b1) (= ((_ extract 15 15) (|comparator_latch#8| state)) #b1) (= ((_ extract 16 16) (|comparator_latch#8| state)) #b1) (= ((_ extract 17 17) (|comparator_latch#8| state)) #b1) (= ((_ extract 18 18) (|comparator_latch#8| state)) #b1) (= ((_ extract 19 19) (|comparator_latch#8| state)) #b1) (= ((_ extract 20 20) (|comparator_latch#8| state)) #b1) (= ((_ extract 21 21) (|comparator_latch#8| state)) #b1) (= ((_ extract 22 22) (|comparator_latch#8| state)) #b1) (= ((_ extract 23 23) (|comparator_latch#8| state)) #b1) (= ((_ extract 24 24) (|comparator_latch#8| state)) #b1) (= ((_ extract 25 25) (|comparator_latch#8| state)) #b1) (= ((_ extract 26 26) (|comparator_latch#8| state)) #b1) (= ((_ extract 27 27) (|comparator_latch#8| state)) #b1) (= ((_ extract 28 28) (|comparator_latch#8| state)) #b1) (= ((_ extract 29 29) (|comparator_latch#8| state)) #b1) (= ((_ extract 30 30) (|comparator_latch#8| state)) #b1) (= ((_ extract 31 31) (|comparator_latch#8| state)) #b1)))) ; $eq$./comparator_latch.v:29$178_Y
(define-fun |comparator_latch#10| ((state |comparator_latch_s|)) (_ BitVec 1) (ite (|comparator_latch#9| state) #b1 #b0)) ; \out
; yosys-smt2-output out 1
; yosys-smt2-wire out 1
(define-fun |comparator_latch_n out| ((state |comparator_latch_s|)) Bool (= ((_ extract 0 0) (|comparator_latch#10| state)) #b1))
(declare-fun |comparator_latch#11| (|comparator_latch_s|) (_ BitVec 10)) ; \n
; yosys-smt2-input n 10
; yosys-smt2-wire n 10
; yosys-smt2-witness {"offset": 0, "path": ["\\n"], "smtname": "n", "smtoffset": 0, "type": "input", "width": 10}
(define-fun |comparator_latch_n n| ((state |comparator_latch_s|)) (_ BitVec 10) (|comparator_latch#11| state))
; yosys-smt2-wire fsm 32
(define-fun |comparator_latch_n fsm| ((state |comparator_latch_s|)) (_ BitVec 32) (|comparator_latch#8| state))
; yosys-smt2-wire const_4 15
(define-fun |comparator_latch_n const_4| ((state |comparator_latch_s|)) (_ BitVec 15) #b000000000000000)
; yosys-smt2-wire const_1 13
(define-fun |comparator_latch_n const_1| ((state |comparator_latch_s|)) (_ BitVec 13) #b1000000000000)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |comparator_latch_n clk| ((state |comparator_latch_s|)) Bool (= ((_ extract 0 0) (|comparator_latch#6| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/fsm#sampled$515 32
(define-fun |comparator_latch_n $auto$clk2fflogic.cc:88:sample_data$/fsm#sampled$515| ((state |comparator_latch_s|)) (_ BitVec 32) (|comparator_latch#3| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/fsm[31:0]#sampled$517 32
(define-fun |comparator_latch_n $auto$clk2fflogic.cc:88:sample_data$$0/fsm[31:0]#sampled$517| ((state |comparator_latch_s|)) (_ BitVec 32) (|comparator_latch#4| state))
; yosys-smt2-register $auto$clk2fflogic.cc:74:sample_control_edge$/clk#sampled$519 1
(define-fun |comparator_latch_n $auto$clk2fflogic.cc:74:sample_control_edge$/clk#sampled$519| ((state |comparator_latch_s|)) Bool (= ((_ extract 0 0) (|comparator_latch#5| state)) #b1))
(define-fun |comparator_latch#12| ((state |comparator_latch_s|)) Bool (bvugt (|comparator_latch#2| state) (|comparator_latch#11| state))) ; $gt$./comparator_latch.v:48$185_Y
(define-fun |comparator_latch#13| ((state |comparator_latch_s|)) Bool (bvule (|comparator_latch#2| state) #b1000000000)) ; $le$./comparator_latch.v:48$186_Y
(define-fun |comparator_latch#14| ((state |comparator_latch_s|)) (_ BitVec 1) (bvand (ite (|comparator_latch#12| state) #b1 #b0) (ite (|comparator_latch#13| state) #b1 #b0))) ; $and$./comparator_latch.v:48$187_Y
(define-fun |comparator_latch#15| ((state |comparator_latch_s|)) (_ BitVec 32) (ite (= ((_ extract 0 0) (|comparator_latch#14| state)) #b1) #b00000000000000000000000000000000 (|comparator_latch#8| state))) ; $procmux$289_Y
(define-fun |comparator_latch#16| ((state |comparator_latch_s|)) Bool (bvugt (|comparator_latch#2| state) #b0000000000)) ; $gt$./comparator_latch.v:43$182_Y
(define-fun |comparator_latch#17| ((state |comparator_latch_s|)) Bool (bvule (|comparator_latch#2| state) (|comparator_latch#11| state))) ; $le$./comparator_latch.v:43$183_Y
(define-fun |comparator_latch#18| ((state |comparator_latch_s|)) (_ BitVec 1) (bvand (ite (|comparator_latch#16| state) #b1 #b0) (ite (|comparator_latch#17| state) #b1 #b0))) ; $and$./comparator_latch.v:43$184_Y
(define-fun |comparator_latch#19| ((state |comparator_latch_s|)) (_ BitVec 32) (ite (= ((_ extract 0 0) (|comparator_latch#18| state)) #b1) #b00000000000000000000000000000001 (|comparator_latch#8| state))) ; $procmux$293_Y
(define-fun |comparator_latch#20| ((state |comparator_latch_s|)) Bool (= (|comparator_latch#8| state) #b00000000000000000000000000000001)) ; $procmux$292_CMP
(define-fun |comparator_latch#21| ((state |comparator_latch_s|)) (_ BitVec 32) (ite (|comparator_latch#9| state) (|comparator_latch#19| state) (ite (|comparator_latch#20| state) (|comparator_latch#15| state) (|comparator_latch#8| state)))) ; $procmux$291_Y
(define-fun |comparator_latch#22| ((state |comparator_latch_s|)) (_ BitVec 32) (ite (|comparator_latch#1| state) #b00000000000000000000000000000000 (|comparator_latch#21| state))) ; $0\fsm[31:0]
(define-fun |comparator_latch_a| ((state |comparator_latch_s|)) Bool true)
(define-fun |comparator_latch_u| ((state |comparator_latch_s|)) Bool true)
(define-fun |comparator_latch_i| ((state |comparator_latch_s|)) Bool (and
  (= (|comparator_latch#4| state) #b00000000000000000000000000000000) ; $auto$clk2fflogic.cc:88:sample_data$$0/fsm[31:0]#sampled$517
  (= (= ((_ extract 0 0) (|comparator_latch#5| state)) #b1) true) ; $auto$clk2fflogic.cc:74:sample_control_edge$/clk#sampled$519
))
(define-fun |comparator_latch_h| ((state |comparator_latch_s|)) Bool true)
(define-fun |comparator_latch_t| ((state |comparator_latch_s|) (next_state |comparator_latch_s|)) Bool (and
  (= (|comparator_latch#6| state) (|comparator_latch#5| next_state)) ; $auto$clk2fflogic.cc:79:sample_control_edge$520 $auto$clk2fflogic.cc:74:sample_control_edge$\clk#sampled$519
  (= (|comparator_latch#22| state) (|comparator_latch#4| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$518 $auto$clk2fflogic.cc:88:sample_data$$0\fsm[31:0]#sampled$517
  (= (|comparator_latch#8| state) (|comparator_latch#3| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$516 $auto$clk2fflogic.cc:88:sample_data$\fsm#sampled$515
)) ; end of module comparator_latch
; yosys-smt2-module digital_to_analog_converter
(declare-sort |digital_to_analog_converter_s| 0)
(declare-fun |digital_to_analog_converter_is| (|digital_to_analog_converter_s|) Bool)
(declare-fun |digital_to_analog_converter#0| (|digital_to_analog_converter_s|) (_ BitVec 10)) ; \input_voltage_digital
(define-fun |digital_to_analog_converter#1| ((state |digital_to_analog_converter_s|)) (_ BitVec 22) (bvmul #b0000000000110100110011 (concat #b000000000000 (|digital_to_analog_converter#0| state)))) ; \truncR_12 [33:12]
(declare-fun |digital_to_analog_converter#2| (|digital_to_analog_converter_s|) (_ BitVec 24)) ; \truncval_5 [51:28]
; yosys-smt2-wire truncval_5 52
(define-fun |digital_to_analog_converter_n truncval_5| ((state |digital_to_analog_converter_s|)) (_ BitVec 52) (concat (|digital_to_analog_converter#2| state) (concat ((_ extract 21 10) (|digital_to_analog_converter#1| state)) #b0000000000000000)))
(declare-fun |digital_to_analog_converter#3| (|digital_to_analog_converter_s|) (_ BitVec 8)) ; \truncval_13 [41:34]
; yosys-smt2-wire truncval_13 42
(define-fun |digital_to_analog_converter_n truncval_13| ((state |digital_to_analog_converter_s|)) (_ BitVec 42) (concat (|digital_to_analog_converter#3| state) (concat (|digital_to_analog_converter#1| state) #b000000000000)))
; yosys-smt2-wire truncR_4 28
(define-fun |digital_to_analog_converter_n truncR_4| ((state |digital_to_analog_converter_s|)) (_ BitVec 28) (concat ((_ extract 21 10) (|digital_to_analog_converter#1| state)) #b0000000000000000))
; yosys-smt2-wire truncR_12 34
(define-fun |digital_to_analog_converter_n truncR_12| ((state |digital_to_analog_converter_s|)) (_ BitVec 34) (concat (|digital_to_analog_converter#1| state) #b000000000000))
; yosys-smt2-wire toSInt_imm_11 12
(define-fun |digital_to_analog_converter_n toSInt_imm_11| ((state |digital_to_analog_converter_s|)) (_ BitVec 12) ((_ extract 21 10) (|digital_to_analog_converter#1| state)))
; yosys-smt2-wire toSInt_10 1
(define-fun |digital_to_analog_converter_n toSInt_10| ((state |digital_to_analog_converter_s|)) Bool false)
(declare-fun |digital_to_analog_converter#4| (|digital_to_analog_converter_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |digital_to_analog_converter_n reset| ((state |digital_to_analog_converter_s|)) Bool (|digital_to_analog_converter#4| state))
; yosys-smt2-wire padr_bits_9 13
(define-fun |digital_to_analog_converter_n padr_bits_9| ((state |digital_to_analog_converter_s|)) (_ BitVec 13) #b0000000000000)
; yosys-smt2-wire padr_bits_24 11
(define-fun |digital_to_analog_converter_n padr_bits_24| ((state |digital_to_analog_converter_s|)) (_ BitVec 11) #b00000000000)
; yosys-smt2-wire padr_bits_1 1
(define-fun |digital_to_analog_converter_n padr_bits_1| ((state |digital_to_analog_converter_s|)) Bool false)
; yosys-smt2-wire padr_8 25
(define-fun |digital_to_analog_converter_n padr_8| ((state |digital_to_analog_converter_s|)) (_ BitVec 25) (concat ((_ extract 21 10) (|digital_to_analog_converter#1| state)) #b0000000000000))
; yosys-smt2-wire padr_23 21
(define-fun |digital_to_analog_converter_n padr_23| ((state |digital_to_analog_converter_s|)) (_ BitVec 21) (concat (|digital_to_analog_converter#0| state) #b00000000000))
; yosys-smt2-wire padr_0 9
(define-fun |digital_to_analog_converter_n padr_0| ((state |digital_to_analog_converter_s|)) (_ BitVec 9) (concat ((_ extract 21 14) (|digital_to_analog_converter#1| state)) #b0))
; yosys-smt2-wire padl_bits_zero_31 1
(define-fun |digital_to_analog_converter_n padl_bits_zero_31| ((state |digital_to_analog_converter_s|)) Bool false)
; yosys-smt2-wire padl_bits_zero_25 21
(define-fun |digital_to_analog_converter_n padl_bits_zero_25| ((state |digital_to_analog_converter_s|)) (_ BitVec 21) #b000000000000000000000)
; yosys-smt2-wire padl_bits_zero_20 21
(define-fun |digital_to_analog_converter_n padl_bits_zero_20| ((state |digital_to_analog_converter_s|)) (_ BitVec 21) #b000000000000000000000)
; yosys-smt2-wire padl_bits_zero_19 8
(define-fun |digital_to_analog_converter_n padl_bits_zero_19| ((state |digital_to_analog_converter_s|)) (_ BitVec 8) #b00000000)
; yosys-smt2-wire padl_bits_7 25
(define-fun |digital_to_analog_converter_n padl_bits_7| ((state |digital_to_analog_converter_s|)) (_ BitVec 25) (concat ((_ extract 21 10) (|digital_to_analog_converter#1| state)) #b0000000000000))
; yosys-smt2-wire padl_bits_3 8
(define-fun |digital_to_analog_converter_n padl_bits_3| ((state |digital_to_analog_converter_s|)) (_ BitVec 8) ((_ extract 21 14) (|digital_to_analog_converter#1| state)))
; yosys-smt2-wire padl_bits_29 15
(define-fun |digital_to_analog_converter_n padl_bits_29| ((state |digital_to_analog_converter_s|)) (_ BitVec 15) #b000000000001000)
; yosys-smt2-wire padl_bits_27 26
(define-fun |digital_to_analog_converter_n padl_bits_27| ((state |digital_to_analog_converter_s|)) (_ BitVec 26) #b00000000000000000000001000)
; yosys-smt2-wire padl_bits_22 21
(define-fun |digital_to_analog_converter_n padl_bits_22| ((state |digital_to_analog_converter_s|)) (_ BitVec 21) (concat (|digital_to_analog_converter#0| state) #b00000000000))
; yosys-smt2-wire padl_bits_17 13
(define-fun |digital_to_analog_converter_n padl_bits_17| ((state |digital_to_analog_converter_s|)) (_ BitVec 13) #b1101001100110)
; yosys-smt2-wire padl_bits_15 21
(define-fun |digital_to_analog_converter_n padl_bits_15| ((state |digital_to_analog_converter_s|)) (_ BitVec 21) #b000000001101001100110)
; yosys-smt2-wire padl_6 25
(define-fun |digital_to_analog_converter_n padl_6| ((state |digital_to_analog_converter_s|)) (_ BitVec 25) (concat ((_ extract 21 10) (|digital_to_analog_converter#1| state)) #b0000000000000))
; yosys-smt2-wire padl_28 26
(define-fun |digital_to_analog_converter_n padl_28| ((state |digital_to_analog_converter_s|)) (_ BitVec 26) #b00000000000000000000001000)
; yosys-smt2-wire padl_26 52
(define-fun |digital_to_analog_converter_n padl_26| ((state |digital_to_analog_converter_s|)) (_ BitVec 52) #b0000000000000000000000000000000000000000000000001000)
; yosys-smt2-wire padl_21 42
(define-fun |digital_to_analog_converter_n padl_21| ((state |digital_to_analog_converter_s|)) (_ BitVec 42) (concat #b000000000000000000000 (concat (|digital_to_analog_converter#0| state) #b00000000000)))
; yosys-smt2-wire padl_2 9
(define-fun |digital_to_analog_converter_n padl_2| ((state |digital_to_analog_converter_s|)) (_ BitVec 9) (concat #b0 ((_ extract 21 14) (|digital_to_analog_converter#1| state))))
; yosys-smt2-wire padl_16 21
(define-fun |digital_to_analog_converter_n padl_16| ((state |digital_to_analog_converter_s|)) (_ BitVec 21) #b000000001101001100110)
; yosys-smt2-wire padl_14 42
(define-fun |digital_to_analog_converter_n padl_14| ((state |digital_to_analog_converter_s|)) (_ BitVec 42) #b000000000000000000000000000001101001100110)
; yosys-smt2-output output_voltage_real 10
; yosys-smt2-wire output_voltage_real 10
(define-fun |digital_to_analog_converter_n output_voltage_real| ((state |digital_to_analog_converter_s|)) (_ BitVec 10) (concat #b0 (concat ((_ extract 21 14) (|digital_to_analog_converter#1| state)) #b0)))
; yosys-smt2-input input_voltage_digital 10
; yosys-smt2-wire input_voltage_digital 10
; yosys-smt2-witness {"offset": 0, "path": ["\\input_voltage_digital"], "smtname": "input_voltage_digital", "smtoffset": 0, "type": "input", "width": 10}
(define-fun |digital_to_analog_converter_n input_voltage_digital| ((state |digital_to_analog_converter_s|)) (_ BitVec 10) (|digital_to_analog_converter#0| state))
; yosys-smt2-wire const_30 15
(define-fun |digital_to_analog_converter_n const_30| ((state |digital_to_analog_converter_s|)) (_ BitVec 15) #b000000000001000)
; yosys-smt2-wire const_18 13
(define-fun |digital_to_analog_converter_n const_18| ((state |digital_to_analog_converter_s|)) (_ BitVec 13) #b1101001100110)
(declare-fun |digital_to_analog_converter#5| (|digital_to_analog_converter_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |digital_to_analog_converter_n clk| ((state |digital_to_analog_converter_s|)) Bool (|digital_to_analog_converter#5| state))
(define-fun |digital_to_analog_converter_a| ((state |digital_to_analog_converter_s|)) Bool true)
(define-fun |digital_to_analog_converter_u| ((state |digital_to_analog_converter_s|)) Bool true)
(define-fun |digital_to_analog_converter_i| ((state |digital_to_analog_converter_s|)) Bool true)
(define-fun |digital_to_analog_converter_h| ((state |digital_to_analog_converter_s|)) Bool true)
(define-fun |digital_to_analog_converter_t| ((state |digital_to_analog_converter_s|) (next_state |digital_to_analog_converter_s|)) Bool true) ; end of module digital_to_analog_converter
; yosys-smt2-module sample_and_hold
(declare-sort |sample_and_hold_s| 0)
(declare-fun |sample_and_hold_is| (|sample_and_hold_s|) Bool)
(declare-fun |sample_and_hold#0| (|sample_and_hold_s|) Bool) ; \sys_clk
; yosys-smt2-input sys_clk 1
; yosys-smt2-wire sys_clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\sys_clk"], "smtname": "sys_clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |sample_and_hold_n sys_clk| ((state |sample_and_hold_s|)) Bool (|sample_and_hold#0| state))
; yosys-smt2-anyinit sample_and_hold#1 10 $auto$clk2fflogic.cc:95:sample_data$506
; yosys-smt2-witness {"offset": 0, "path": ["\\state_cap"], "smtname": 1, "smtoffset": 0, "type": "init", "width": 10}
(declare-fun |sample_and_hold#1| (|sample_and_hold_s|) (_ BitVec 10)) ; $auto$clk2fflogic.cc:88:sample_data$\state_cap#sampled$505
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\state_cap[9:0]#sampled$507"], "smtname": 2, "smtoffset": 0, "type": "reg", "width": 10}
(declare-fun |sample_and_hold#2| (|sample_and_hold_s|) (_ BitVec 10)) ; $auto$clk2fflogic.cc:88:sample_data$$0\state_cap[9:0]#sampled$507
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:74:sample_control_edge$\\clk#sampled$499"], "smtname": 3, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sample_and_hold#3| (|sample_and_hold_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:74:sample_control_edge$\clk#sampled$499
(declare-fun |sample_and_hold#4| (|sample_and_hold_s|) (_ BitVec 1)) ; \clk
(define-fun |sample_and_hold#5| ((state |sample_and_hold_s|)) Bool (= (concat (|sample_and_hold#3| state) (|sample_and_hold#4| state)) #b01)) ; $auto$rtlil.cc:2501:Eqx$502
(define-fun |sample_and_hold#6| ((state |sample_and_hold_s|)) (_ BitVec 10) (ite (|sample_and_hold#5| state) (|sample_and_hold#2| state) (|sample_and_hold#1| state))) ; \state_cap
; yosys-smt2-wire state_cap 10
(define-fun |sample_and_hold_n state_cap| ((state |sample_and_hold_s|)) (_ BitVec 10) (|sample_and_hold#6| state))
(declare-fun |sample_and_hold#7| (|sample_and_hold_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |sample_and_hold_n reset| ((state |sample_and_hold_s|)) Bool (|sample_and_hold#7| state))
; yosys-smt2-output output_voltage_real 10
; yosys-smt2-wire output_voltage_real 10
(define-fun |sample_and_hold_n output_voltage_real| ((state |sample_and_hold_s|)) (_ BitVec 10) (|sample_and_hold#6| state))
(declare-fun |sample_and_hold#8| (|sample_and_hold_s|) (_ BitVec 10)) ; \input_voltage_real
; yosys-smt2-input input_voltage_real 10
; yosys-smt2-wire input_voltage_real 10
; yosys-smt2-witness {"offset": 0, "path": ["\\input_voltage_real"], "smtname": "input_voltage_real", "smtoffset": 0, "type": "input", "width": 10}
(define-fun |sample_and_hold_n input_voltage_real| ((state |sample_and_hold_s|)) (_ BitVec 10) (|sample_and_hold#8| state))
(declare-fun |sample_and_hold#9| (|sample_and_hold_s|) Bool) ; \input_control_digital
; yosys-smt2-input input_control_digital 1
; yosys-smt2-wire input_control_digital 1
; yosys-smt2-witness {"offset": 0, "path": ["\\input_control_digital"], "smtname": "input_control_digital", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |sample_and_hold_n input_control_digital| ((state |sample_and_hold_s|)) Bool (|sample_and_hold#9| state))
; yosys-smt2-anyinit sample_and_hold#10 32 $auto$clk2fflogic.cc:95:sample_data$496
; yosys-smt2-witness {"offset": 0, "path": ["\\fsm"], "smtname": 10, "smtoffset": 0, "type": "init", "width": 32}
(declare-fun |sample_and_hold#10| (|sample_and_hold_s|) (_ BitVec 32)) ; $auto$clk2fflogic.cc:88:sample_data$\fsm#sampled$495
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\fsm[31:0]#sampled$497"], "smtname": 11, "smtoffset": 0, "type": "reg", "width": 32}
(declare-fun |sample_and_hold#11| (|sample_and_hold_s|) (_ BitVec 32)) ; $auto$clk2fflogic.cc:88:sample_data$$0\fsm[31:0]#sampled$497
(define-fun |sample_and_hold#12| ((state |sample_and_hold_s|)) (_ BitVec 32) (ite (|sample_and_hold#5| state) (|sample_and_hold#11| state) (|sample_and_hold#10| state))) ; \fsm
; yosys-smt2-wire fsm 32
(define-fun |sample_and_hold_n fsm| ((state |sample_and_hold_s|)) (_ BitVec 32) (|sample_and_hold#12| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |sample_and_hold_n clk| ((state |sample_and_hold_s|)) Bool (= ((_ extract 0 0) (|sample_and_hold#4| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/state_cap#sampled$505 10
(define-fun |sample_and_hold_n $auto$clk2fflogic.cc:88:sample_data$/state_cap#sampled$505| ((state |sample_and_hold_s|)) (_ BitVec 10) (|sample_and_hold#1| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/fsm#sampled$495 32
(define-fun |sample_and_hold_n $auto$clk2fflogic.cc:88:sample_data$/fsm#sampled$495| ((state |sample_and_hold_s|)) (_ BitVec 32) (|sample_and_hold#10| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/state_cap[9:0]#sampled$507 10
(define-fun |sample_and_hold_n $auto$clk2fflogic.cc:88:sample_data$$0/state_cap[9:0]#sampled$507| ((state |sample_and_hold_s|)) (_ BitVec 10) (|sample_and_hold#2| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/fsm[31:0]#sampled$497 32
(define-fun |sample_and_hold_n $auto$clk2fflogic.cc:88:sample_data$$0/fsm[31:0]#sampled$497| ((state |sample_and_hold_s|)) (_ BitVec 32) (|sample_and_hold#11| state))
; yosys-smt2-register $auto$clk2fflogic.cc:74:sample_control_edge$/clk#sampled$499 1
(define-fun |sample_and_hold_n $auto$clk2fflogic.cc:74:sample_control_edge$/clk#sampled$499| ((state |sample_and_hold_s|)) Bool (= ((_ extract 0 0) (|sample_and_hold#3| state)) #b1))
(define-fun |sample_and_hold#13| ((state |sample_and_hold_s|)) (_ BitVec 32) (ite (|sample_and_hold#9| state) (|sample_and_hold#12| state) #b00000000000000000000000000000000)) ; $procmux$247_Y
(define-fun |sample_and_hold#14| ((state |sample_and_hold_s|)) (_ BitVec 32) (ite (|sample_and_hold#9| state) #b00000000000000000000000000000001 (|sample_and_hold#12| state))) ; $procmux$251_Y
(define-fun |sample_and_hold#15| ((state |sample_and_hold_s|)) Bool (= (|sample_and_hold#12| state) #b00000000000000000000000000000001)) ; $procmux$250_CMP
(define-fun |sample_and_hold#16| ((state |sample_and_hold_s|)) Bool (not (or  (= ((_ extract 0 0) (|sample_and_hold#12| state)) #b1) (= ((_ extract 1 1) (|sample_and_hold#12| state)) #b1) (= ((_ extract 2 2) (|sample_and_hold#12| state)) #b1) (= ((_ extract 3 3) (|sample_and_hold#12| state)) #b1) (= ((_ extract 4 4) (|sample_and_hold#12| state)) #b1) (= ((_ extract 5 5) (|sample_and_hold#12| state)) #b1) (= ((_ extract 6 6) (|sample_and_hold#12| state)) #b1) (= ((_ extract 7 7) (|sample_and_hold#12| state)) #b1) (= ((_ extract 8 8) (|sample_and_hold#12| state)) #b1) (= ((_ extract 9 9) (|sample_and_hold#12| state)) #b1) (= ((_ extract 10 10) (|sample_and_hold#12| state)) #b1) (= ((_ extract 11 11) (|sample_and_hold#12| state)) #b1) (= ((_ extract 12 12) (|sample_and_hold#12| state)) #b1) (= ((_ extract 13 13) (|sample_and_hold#12| state)) #b1) (= ((_ extract 14 14) (|sample_and_hold#12| state)) #b1) (= ((_ extract 15 15) (|sample_and_hold#12| state)) #b1) (= ((_ extract 16 16) (|sample_and_hold#12| state)) #b1) (= ((_ extract 17 17) (|sample_and_hold#12| state)) #b1) (= ((_ extract 18 18) (|sample_and_hold#12| state)) #b1) (= ((_ extract 19 19) (|sample_and_hold#12| state)) #b1) (= ((_ extract 20 20) (|sample_and_hold#12| state)) #b1) (= ((_ extract 21 21) (|sample_and_hold#12| state)) #b1) (= ((_ extract 22 22) (|sample_and_hold#12| state)) #b1) (= ((_ extract 23 23) (|sample_and_hold#12| state)) #b1) (= ((_ extract 24 24) (|sample_and_hold#12| state)) #b1) (= ((_ extract 25 25) (|sample_and_hold#12| state)) #b1) (= ((_ extract 26 26) (|sample_and_hold#12| state)) #b1) (= ((_ extract 27 27) (|sample_and_hold#12| state)) #b1) (= ((_ extract 28 28) (|sample_and_hold#12| state)) #b1) (= ((_ extract 29 29) (|sample_and_hold#12| state)) #b1) (= ((_ extract 30 30) (|sample_and_hold#12| state)) #b1) (= ((_ extract 31 31) (|sample_and_hold#12| state)) #b1)))) ; $procmux$253_CMP
(define-fun |sample_and_hold#17| ((state |sample_and_hold_s|)) (_ BitVec 32) (ite (|sample_and_hold#16| state) (|sample_and_hold#14| state) (ite (|sample_and_hold#15| state) (|sample_and_hold#13| state) (|sample_and_hold#12| state)))) ; $procmux$249_Y
(define-fun |sample_and_hold#18| ((state |sample_and_hold_s|)) (_ BitVec 32) (ite (|sample_and_hold#7| state) #b00000000000000000000000000000000 (|sample_and_hold#17| state))) ; $0\fsm[31:0]
(define-fun |sample_and_hold#19| ((state |sample_and_hold_s|)) (_ BitVec 10) (ite (|sample_and_hold#16| state) (|sample_and_hold#8| state) (|sample_and_hold#6| state))) ; $procmux$260_Y
(define-fun |sample_and_hold#20| ((state |sample_and_hold_s|)) (_ BitVec 10) (ite (|sample_and_hold#7| state) (|sample_and_hold#6| state) (|sample_and_hold#19| state))) ; $0\state_cap[9:0]
(define-fun |sample_and_hold_a| ((state |sample_and_hold_s|)) Bool true)
(define-fun |sample_and_hold_u| ((state |sample_and_hold_s|)) Bool true)
(define-fun |sample_and_hold_i| ((state |sample_and_hold_s|)) Bool (and
  (= (|sample_and_hold#2| state) #b0000000000) ; $auto$clk2fflogic.cc:88:sample_data$$0/state_cap[9:0]#sampled$507
  (= (|sample_and_hold#11| state) #b00000000000000000000000000000000) ; $auto$clk2fflogic.cc:88:sample_data$$0/fsm[31:0]#sampled$497
  (= (= ((_ extract 0 0) (|sample_and_hold#3| state)) #b1) true) ; $auto$clk2fflogic.cc:74:sample_control_edge$/clk#sampled$499
))
(define-fun |sample_and_hold_h| ((state |sample_and_hold_s|)) Bool true)
(define-fun |sample_and_hold_t| ((state |sample_and_hold_s|) (next_state |sample_and_hold_s|)) Bool (and
  (= (|sample_and_hold#18| state) (|sample_and_hold#11| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$498 $auto$clk2fflogic.cc:88:sample_data$$0\fsm[31:0]#sampled$497
  (= (|sample_and_hold#12| state) (|sample_and_hold#10| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$496 $auto$clk2fflogic.cc:88:sample_data$\fsm#sampled$495
  (= (|sample_and_hold#4| state) (|sample_and_hold#3| next_state)) ; $auto$clk2fflogic.cc:79:sample_control_edge$500 $auto$clk2fflogic.cc:74:sample_control_edge$\clk#sampled$499
  (= (|sample_and_hold#20| state) (|sample_and_hold#2| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$508 $auto$clk2fflogic.cc:88:sample_data$$0\state_cap[9:0]#sampled$507
  (= (|sample_and_hold#6| state) (|sample_and_hold#1| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$506 $auto$clk2fflogic.cc:88:sample_data$\state_cap#sampled$505
)) ; end of module sample_and_hold
; yosys-smt2-module $paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011
(declare-sort |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s| 0)
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_is| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) Bool)
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#0| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \sys_clk
; yosys-smt2-input sys_clk 1
; yosys-smt2-wire sys_clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\sys_clk"], "smtname": "sys_clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n sys_clk| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#0| state))
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#1| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n reset| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#1| state))
; yosys-smt2-cell sample_and_hold sah
; yosys-smt2-witness {"path": ["\\sah"], "smtname": "sah", "type": "cell"}
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#2| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 10)) ; \p_voltage_real
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) |sample_and_hold_s|)
; yosys-smt2-wire p_voltage_real 10
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n p_voltage_real| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 10) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#2| state))
; yosys-smt2-cell $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011 SAR_instance
; yosys-smt2-witness {"path": ["\\SAR_instance"], "smtname": "SAR_instance", "type": "cell"}
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#3| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 3)) ; \output_result_digital_prescale
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#4| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \eoc
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) |$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_s|)
; yosys-smt2-wire output_result_digital_prescale 3
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n output_result_digital_prescale| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 3) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#3| state))
; yosys-smt2-output output_result_digital 10
; yosys-smt2-wire output_result_digital 10
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n output_result_digital| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 10) (concat (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#3| state) #b0000000))
; yosys-smt2-cell digital_to_analog_converter DAC_instance
; yosys-smt2-witness {"path": ["\\DAC_instance"], "smtname": "DAC_instance", "type": "cell"}
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#5| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 10)) ; \n_voltage_real
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) |digital_to_analog_converter_s|)
; yosys-smt2-wire n_voltage_real 10
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n n_voltage_real| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 10) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#5| state))
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#6| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 10)) ; \input_voltage_real
; yosys-smt2-input input_voltage_real 10
; yosys-smt2-wire input_voltage_real 10
; yosys-smt2-witness {"offset": 0, "path": ["\\input_voltage_real"], "smtname": "input_voltage_real", "smtoffset": 0, "type": "input", "width": 10}
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n input_voltage_real| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 10) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#6| state))
; yosys-smt2-wire input_voltage_dac_shift 10
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n input_voltage_dac_shift| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 10) (concat (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#3| state) #b0000000))
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#7| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \input_hold_digital
; yosys-smt2-input input_hold_digital 1
; yosys-smt2-wire input_hold_digital 1
; yosys-smt2-witness {"offset": 0, "path": ["\\input_hold_digital"], "smtname": "input_hold_digital", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n input_hold_digital| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#7| state))
; yosys-smt2-output eoc 1
; yosys-smt2-wire eoc 1
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n eoc| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#4| state))
; yosys-smt2-cell comparator_latch comparator_instance
; yosys-smt2-witness {"path": ["\\comparator_instance"], "smtname": "comparator_instance", "type": "cell"}
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#8| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \comparator_output_digital
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) |comparator_latch_s|)
; yosys-smt2-wire comparator_output_real 10
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n comparator_output_real| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 10) (concat #b000000000 (ite (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#8| state) #b1 #b0)))
; yosys-smt2-wire comparator_output_digital 1
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n comparator_output_digital| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#8| state))
(declare-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#9| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n clk| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#9| state))
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_a| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (and
  (|digital_to_analog_converter_a| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| state))
  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_a| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state))
  (|comparator_latch_a| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state))
  (|sample_and_hold_a| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state))
))
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_u| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (and
  (|digital_to_analog_converter_u| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| state))
  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_u| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state))
  (|comparator_latch_u| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state))
  (|sample_and_hold_u| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state))
))
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_i| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (and
  (|digital_to_analog_converter_i| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| state))
  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_i| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state))
  (|comparator_latch_i| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state))
  (|sample_and_hold_i| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state))
))
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (and
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_is| state) (|digital_to_analog_converter_is| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| state)))
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#1| state) (|digital_to_analog_converter_n reset| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| state))) ; digital_to_analog_converter.reset
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#5| state) (|digital_to_analog_converter_n output_voltage_real| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| state))) ; digital_to_analog_converter.output_voltage_real
  (= (concat (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#3| state) #b0000000) (|digital_to_analog_converter_n input_voltage_digital| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| state))) ; digital_to_analog_converter.input_voltage_digital
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#9| state) (|digital_to_analog_converter_n clk| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| state))) ; digital_to_analog_converter.clk
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_is| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_is| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state)))
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#0| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n sys_clk| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state))) ; $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011.sys_clk
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#1| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n reset| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state))) ; $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011.reset
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#3| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n quantized_voltage| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state))) ; $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011.quantized_voltage
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#8| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n feedback_value| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state))) ; $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011.feedback_value
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#4| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n eoc| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state))) ; $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011.eoc
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#7| state) (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_n conduct_comparison| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state))) ; $paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011.conduct_comparison
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_is| state) (|comparator_latch_is| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state)))
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#0| state) (|comparator_latch_n sys_clk| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state))) ; comparator_latch.sys_clk
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#1| state) (|comparator_latch_n reset| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state))) ; comparator_latch.reset
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#2| state) (|comparator_latch_n p| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state))) ; comparator_latch.p
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#8| state) (|comparator_latch_n out| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state))) ; comparator_latch.out
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#5| state) (|comparator_latch_n n| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state))) ; comparator_latch.n
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#9| state) (|comparator_latch_n clk| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state))) ; comparator_latch.clk
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_is| state) (|sample_and_hold_is| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state)))
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#0| state) (|sample_and_hold_n sys_clk| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state))) ; sample_and_hold.sys_clk
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#1| state) (|sample_and_hold_n reset| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state))) ; sample_and_hold.reset
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#2| state) (|sample_and_hold_n output_voltage_real| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state))) ; sample_and_hold.output_voltage_real
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#6| state) (|sample_and_hold_n input_voltage_real| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state))) ; sample_and_hold.input_voltage_real
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#7| state) (|sample_and_hold_n input_control_digital| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state))) ; sample_and_hold.input_control_digital
  (= (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011#9| state) (|sample_and_hold_n clk| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state))) ; sample_and_hold.clk
  (|digital_to_analog_converter_h| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| state))
  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_h| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state))
  (|comparator_latch_h| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state))
  (|sample_and_hold_h| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state))
))
(define-fun |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_t| ((state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|) (next_state |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (and
  (|digital_to_analog_converter_t| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h DAC_instance| next_state))
  (|$paramod/successive_approximation_register/N_BITS=s32'00000000000000000000000000000011_t| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h SAR_instance| next_state))
  (|comparator_latch_t| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h comparator_instance| next_state))
  (|sample_and_hold_t| (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h sah| next_state))
)) ; end of module $paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011
; yosys-smt2-module $paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011
(declare-sort |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s| 0)
(declare-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_is| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|) Bool)
(declare-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#0| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \sys_clk
; yosys-smt2-input sys_clk 1
; yosys-smt2-wire sys_clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\sys_clk"], "smtname": "sys_clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n sys_clk| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#0| state))
(declare-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#1| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n reset| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#1| state))
; yosys-smt2-cell $paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011 v
; yosys-smt2-witness {"path": ["\\v"], "smtname": "v", "type": "cell"}
(declare-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#2| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 10)) ; \output_result_digital
(declare-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#3| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \eoc
(declare-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|) |$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_s|)
; yosys-smt2-output output_result_digital 10
; yosys-smt2-wire output_result_digital 10
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n output_result_digital| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 10) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#2| state))
(declare-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#4| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|) (_ BitVec 10)) ; \input_voltage_real
; yosys-smt2-input input_voltage_real 10
; yosys-smt2-wire input_voltage_real 10
; yosys-smt2-witness {"offset": 0, "path": ["\\input_voltage_real"], "smtname": "input_voltage_real", "smtoffset": 0, "type": "input", "width": 10}
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n input_voltage_real| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) (_ BitVec 10) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#4| state))
(declare-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#5| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \input_hold_digital
; yosys-smt2-input input_hold_digital 1
; yosys-smt2-wire input_hold_digital 1
; yosys-smt2-witness {"offset": 0, "path": ["\\input_hold_digital"], "smtname": "input_hold_digital", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n input_hold_digital| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#5| state))
; yosys-smt2-output eoc 1
; yosys-smt2-wire eoc 1
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n eoc| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#3| state))
(declare-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#6| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n clk| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#6| state))
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_a| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) Bool 
  (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_a| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))
)
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_u| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) Bool 
  (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_u| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))
)
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_i| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) Bool 
  (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_i| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))
)
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) Bool (and
  (= (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_is| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_is| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state)))
  (= (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#0| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n sys_clk| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))) ; $paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011.sys_clk
  (= (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#1| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n reset| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))) ; $paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011.reset
  (= (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#2| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n output_result_digital| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))) ; $paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011.output_result_digital
  (= (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#4| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n input_voltage_real| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))) ; $paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011.input_voltage_real
  (= (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#5| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n input_hold_digital| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))) ; $paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011.input_hold_digital
  (= (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#3| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n eoc| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))) ; $paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011.eoc
  (= (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011#6| state) (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_n clk| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))) ; $paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011.clk
  (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_h| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state))
))
(define-fun |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_t| ((state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|) (next_state |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)) Bool 
  (|$paramod/sar_adc/N_BITS=s32'00000000000000000000000000000011_t| (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| state) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h v| next_state))
) ; end of module $paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011
; yosys-smt2-module sar_tb_working
(declare-sort |sar_tb_working_s| 0)
(declare-fun |sar_tb_working_is| (|sar_tb_working_s|) Bool)
; yosys-smt2-anyinit sar_tb_working#0 32 $auto$clk2fflogic.cc:95:sample_data$366
; yosys-smt2-witness {"offset": 0, "path": ["\\sys_counter"], "smtname": 0, "smtoffset": 0, "type": "init", "width": 32}
(declare-fun |sar_tb_working#0| (|sar_tb_working_s|) (_ BitVec 32)) ; $auto$clk2fflogic.cc:88:sample_data$\sys_counter#sampled$365
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\sys_counter[31:0]#sampled$367"], "smtname": 1, "smtoffset": 0, "type": "reg", "width": 32}
(declare-fun |sar_tb_working#1| (|sar_tb_working_s|) (_ BitVec 32)) ; $auto$clk2fflogic.cc:88:sample_data$$0\sys_counter[31:0]#sampled$367
; yosys-smt2-cell $paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010 fdiv
; yosys-smt2-witness {"path": ["\\fdiv"], "smtname": "fdiv", "type": "cell"}
(declare-fun |sar_tb_working#2| (|sar_tb_working_s|) Bool) ; \sys_clk
(declare-fun |sar_tb_working_h fdiv| (|sar_tb_working_s|) |$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_s|)
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:74:sample_control_edge$\\sys_clk#sampled$369"], "smtname": 3, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#3| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:74:sample_control_edge$\sys_clk#sampled$369
(define-fun |sar_tb_working#4| ((state |sar_tb_working_s|)) Bool (= (concat (|sar_tb_working#3| state) (ite (|sar_tb_working#2| state) #b1 #b0)) #b01)) ; $auto$rtlil.cc:2501:Eqx$372
(define-fun |sar_tb_working#5| ((state |sar_tb_working_s|)) (_ BitVec 32) (ite (|sar_tb_working#4| state) (|sar_tb_working#1| state) (|sar_tb_working#0| state))) ; \sys_counter
; yosys-smt2-wire sys_counter 32
(define-fun |sar_tb_working_n sys_counter| ((state |sar_tb_working_s|)) (_ BitVec 32) (|sar_tb_working#5| state))
; yosys-smt2-wire sys_clk 1
(define-fun |sar_tb_working_n sys_clk| ((state |sar_tb_working_s|)) Bool (|sar_tb_working#2| state))
(declare-fun |sar_tb_working#6| (|sar_tb_working_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |sar_tb_working_n reset| ((state |sar_tb_working_s|)) Bool (|sar_tb_working#6| state))
; yosys-smt2-cell $paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011 adc_instance
; yosys-smt2-witness {"path": ["\\adc_instance"], "smtname": "adc_instance", "type": "cell"}
(declare-fun |sar_tb_working#7| (|sar_tb_working_s|) (_ BitVec 10)) ; \output_result_digital
(declare-fun |sar_tb_working#8| (|sar_tb_working_s|) Bool) ; \eoc
(declare-fun |sar_tb_working_h adc_instance| (|sar_tb_working_s|) |$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_s|)
; yosys-smt2-output output_result_digital 10
; yosys-smt2-wire output_result_digital 10
(define-fun |sar_tb_working_n output_result_digital| ((state |sar_tb_working_s|)) (_ BitVec 10) (|sar_tb_working#7| state))
(declare-fun |sar_tb_working#9| (|sar_tb_working_s|) (_ BitVec 10)) ; \input_voltage_real
; yosys-smt2-input input_voltage_real 10
; yosys-smt2-wire input_voltage_real 10
; yosys-smt2-witness {"offset": 0, "path": ["\\input_voltage_real"], "smtname": "input_voltage_real", "smtoffset": 0, "type": "input", "width": 10}
(define-fun |sar_tb_working_n input_voltage_real| ((state |sar_tb_working_s|)) (_ BitVec 10) (|sar_tb_working#9| state))
(declare-fun |sar_tb_working#10| (|sar_tb_working_s|) Bool) ; \input_hold_digital
; yosys-smt2-input input_hold_digital 1
; yosys-smt2-wire input_hold_digital 1
; yosys-smt2-witness {"offset": 0, "path": ["\\input_hold_digital"], "smtname": "input_hold_digital", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |sar_tb_working_n input_hold_digital| ((state |sar_tb_working_s|)) Bool (|sar_tb_working#10| state))
; yosys-smt2-anyinit sar_tb_working#11 1 $auto$clk2fflogic.cc:95:sample_data$406
; yosys-smt2-witness {"offset": 0, "path": ["\\hit_eoc"], "smtname": 11, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |sar_tb_working#11| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$\hit_eoc#sampled$405
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\hit_eoc[0:0]#sampled$407"], "smtname": 12, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#12| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$0\hit_eoc[0:0]#sampled$407
(define-fun |sar_tb_working#13| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (|sar_tb_working#4| state) (|sar_tb_working#12| state) (|sar_tb_working#11| state))) ; \hit_eoc
; yosys-smt2-wire hit_eoc 1
(define-fun |sar_tb_working_n hit_eoc| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#13| state)) #b1))
; yosys-smt2-anyinit sar_tb_working#14 10 $auto$clk2fflogic.cc:95:sample_data$486
; yosys-smt2-witness {"offset": 0, "path": ["\\held_value"], "smtname": 14, "smtoffset": 0, "type": "init", "width": 10}
(declare-fun |sar_tb_working#14| (|sar_tb_working_s|) (_ BitVec 10)) ; $auto$clk2fflogic.cc:88:sample_data$\held_value#sampled$485
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\held_value[9:0]#sampled$487"], "smtname": 15, "smtoffset": 0, "type": "reg", "width": 10}
(declare-fun |sar_tb_working#15| (|sar_tb_working_s|) (_ BitVec 10)) ; $auto$clk2fflogic.cc:88:sample_data$$0\held_value[9:0]#sampled$487
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:74:sample_control_edge$\\clk#sampled$359"], "smtname": 16, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#16| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:74:sample_control_edge$\clk#sampled$359
(declare-fun |sar_tb_working#17| (|sar_tb_working_s|) (_ BitVec 1)) ; \clk
(define-fun |sar_tb_working#18| ((state |sar_tb_working_s|)) Bool (= (concat (|sar_tb_working#16| state) (|sar_tb_working#17| state)) #b01)) ; $auto$rtlil.cc:2501:Eqx$362
(define-fun |sar_tb_working#19| ((state |sar_tb_working_s|)) (_ BitVec 10) (ite (|sar_tb_working#18| state) (|sar_tb_working#15| state) (|sar_tb_working#14| state))) ; \held_value
; yosys-smt2-wire held_value 10
(define-fun |sar_tb_working_n held_value| ((state |sar_tb_working_s|)) (_ BitVec 10) (|sar_tb_working#19| state))
; yosys-smt2-anyinit sar_tb_working#20 32 $auto$clk2fflogic.cc:95:sample_data$416
; yosys-smt2-witness {"offset": 0, "path": ["\\eoc_high_counter"], "smtname": 20, "smtoffset": 0, "type": "init", "width": 32}
(declare-fun |sar_tb_working#20| (|sar_tb_working_s|) (_ BitVec 32)) ; $auto$clk2fflogic.cc:88:sample_data$\eoc_high_counter#sampled$415
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\eoc_high_counter[31:0]#sampled$417"], "smtname": 21, "smtoffset": 0, "type": "reg", "width": 32}
(declare-fun |sar_tb_working#21| (|sar_tb_working_s|) (_ BitVec 32)) ; $auto$clk2fflogic.cc:88:sample_data$$0\eoc_high_counter[31:0]#sampled$417
(define-fun |sar_tb_working#22| ((state |sar_tb_working_s|)) (_ BitVec 32) (ite (|sar_tb_working#4| state) (|sar_tb_working#21| state) (|sar_tb_working#20| state))) ; \eoc_high_counter
; yosys-smt2-wire eoc_high_counter 32
(define-fun |sar_tb_working_n eoc_high_counter| ((state |sar_tb_working_s|)) (_ BitVec 32) (|sar_tb_working#22| state))
; yosys-smt2-output eoc 1
; yosys-smt2-wire eoc 1
(define-fun |sar_tb_working_n eoc| ((state |sar_tb_working_s|)) Bool (|sar_tb_working#8| state))
(define-fun |sar_tb_working#23| ((state |sar_tb_working_s|)) (_ BitVec 32) (bvudiv (concat #b000000000000 (concat (|sar_tb_working#19| state) #b0000000000)) #b00000000000000000000000110100111)) ; { $auto$wreduce.cc:461:run$353 [31:20] \digitized_value }
; yosys-smt2-wire digitized_value 20
(define-fun |sar_tb_working_n digitized_value| ((state |sar_tb_working_s|)) (_ BitVec 20) ((_ extract 19 0) (|sar_tb_working#23| state)))
; yosys-smt2-anyinit sar_tb_working#24 64 $auto$clk2fflogic.cc:95:sample_data$356
; yosys-smt2-witness {"offset": 0, "path": ["\\cycles"], "smtname": 24, "smtoffset": 0, "type": "init", "width": 64}
(declare-fun |sar_tb_working#24| (|sar_tb_working_s|) (_ BitVec 64)) ; $auto$clk2fflogic.cc:88:sample_data$\cycles#sampled$355
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0\\cycles[63:0]#sampled$357"], "smtname": 25, "smtoffset": 0, "type": "reg", "width": 64}
(declare-fun |sar_tb_working#25| (|sar_tb_working_s|) (_ BitVec 64)) ; $auto$clk2fflogic.cc:88:sample_data$$0\cycles[63:0]#sampled$357
(define-fun |sar_tb_working#26| ((state |sar_tb_working_s|)) (_ BitVec 64) (ite (|sar_tb_working#18| state) (|sar_tb_working#25| state) (|sar_tb_working#24| state))) ; \cycles
; yosys-smt2-wire cycles 64
(define-fun |sar_tb_working_n cycles| ((state |sar_tb_working_s|)) (_ BitVec 64) (|sar_tb_working#26| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |sar_tb_working_n clk| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#17| state)) #b1))
; yosys-smt2-anyinit sar_tb_working#27 1 $auto$clk2fflogic.cc:95:sample_data$476
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_auto_clk2fflogic_cc_95_sample_data_476"], "smtname": 27, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |sar_tb_working#27| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:120$29_CHECK#sampled$475
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:120$29_CHECK[0:0]$99#sampled$477"], "smtname": 28, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#28| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:120$29_CHECK[0:0]$99#sampled$477
(define-fun |sar_tb_working#29| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (|sar_tb_working#18| state) (|sar_tb_working#28| state) (|sar_tb_working#27| state))) ; \_witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_476
; yosys-smt2-wire _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_476 1
(define-fun |sar_tb_working_n _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_476| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#29| state)) #b1))
; yosys-smt2-anyinit sar_tb_working#30 1 $auto$clk2fflogic.cc:95:sample_data$456
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_auto_clk2fflogic_cc_95_sample_data_456"], "smtname": 30, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |sar_tb_working#30| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:113$26_CHECK#sampled$455
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:113$26_CHECK[0:0]$81#sampled$457"], "smtname": 31, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#31| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:113$26_CHECK[0:0]$81#sampled$457
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:74:sample_control_edge$\\eoc#sampled$429"], "smtname": 32, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#32| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:74:sample_control_edge$\eoc#sampled$429
(define-fun |sar_tb_working#33| ((state |sar_tb_working_s|)) Bool (= (concat (|sar_tb_working#32| state) (ite (|sar_tb_working#8| state) #b1 #b0)) #b01)) ; $auto$rtlil.cc:2501:Eqx$432
(define-fun |sar_tb_working#34| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (|sar_tb_working#33| state) (|sar_tb_working#31| state) (|sar_tb_working#30| state))) ; \_witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_456
; yosys-smt2-wire _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_456 1
(define-fun |sar_tb_working_n _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_456| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#34| state)) #b1))
; yosys-smt2-anyinit sar_tb_working#35 1 $auto$clk2fflogic.cc:95:sample_data$436
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_auto_clk2fflogic_cc_95_sample_data_436"], "smtname": 35, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |sar_tb_working#35| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:114$27_CHECK#sampled$435
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:114$27_CHECK[0:0]$83#sampled$437"], "smtname": 36, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#36| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:114$27_CHECK[0:0]$83#sampled$437
(define-fun |sar_tb_working#37| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (|sar_tb_working#33| state) (|sar_tb_working#36| state) (|sar_tb_working#35| state))) ; \_witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_436
; yosys-smt2-wire _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_436 1
(define-fun |sar_tb_working_n _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_436| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#37| state)) #b1))
; yosys-smt2-anyinit sar_tb_working#38 1 $auto$clk2fflogic.cc:95:sample_data$426
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_auto_clk2fflogic_cc_95_sample_data_426"], "smtname": 38, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |sar_tb_working#38| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:115$28_CHECK#sampled$425
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:115$28_CHECK[0:0]$85#sampled$427"], "smtname": 39, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#39| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:115$28_CHECK[0:0]$85#sampled$427
(define-fun |sar_tb_working#40| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (|sar_tb_working#33| state) (|sar_tb_working#39| state) (|sar_tb_working#38| state))) ; \_witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_426
; yosys-smt2-wire _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_426 1
(define-fun |sar_tb_working_n _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_426| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#40| state)) #b1))
; yosys-smt2-anyinit sar_tb_working#41 1 $auto$clk2fflogic.cc:95:sample_data$396
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_auto_clk2fflogic_cc_95_sample_data_396"], "smtname": 41, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |sar_tb_working#41| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:101$24_CHECK#sampled$395
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:101$24_CHECK[0:0]$62#sampled$397"], "smtname": 42, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#42| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:101$24_CHECK[0:0]$62#sampled$397
(define-fun |sar_tb_working#43| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (|sar_tb_working#4| state) (|sar_tb_working#42| state) (|sar_tb_working#41| state))) ; \_witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_396
; yosys-smt2-wire _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_396 1
(define-fun |sar_tb_working_n _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_396| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#43| state)) #b1))
; yosys-smt2-anyinit sar_tb_working#44 1 $auto$clk2fflogic.cc:95:sample_data$376
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_auto_clk2fflogic_cc_95_sample_data_376"], "smtname": 44, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |sar_tb_working#44| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:103$25_CHECK#sampled$375
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:103$25_CHECK[0:0]$64#sampled$377"], "smtname": 45, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#45| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:103$25_CHECK[0:0]$64#sampled$377
(define-fun |sar_tb_working#46| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (|sar_tb_working#4| state) (|sar_tb_working#45| state) (|sar_tb_working#44| state))) ; \_witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_376
; yosys-smt2-wire _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_376 1
(define-fun |sar_tb_working_n _witness_.anyinit_auto_clk2fflogic_cc_95_sample_data_376| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#46| state)) #b1))
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:120$29_EN#sampled$465"], "smtname": 47, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#47| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:120$29_EN#sampled$465
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$1'1#sampled$387"], "smtname": 48, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#48| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$1'1#sampled$387
(define-fun |sar_tb_working#49| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (|sar_tb_working#18| state) (|sar_tb_working#48| state) (|sar_tb_working#47| state))) ; $formal$sar_adc_ideal_conv.sv:120$29_EN
; yosys-smt2-wire $formal$sar_adc_ideal_conv.sv:120$29_EN 1
(define-fun |sar_tb_working_n $formal$sar_adc_ideal_conv.sv:120$29_EN| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#49| state)) #b1))
; yosys-smt2-wire $formal$sar_adc_ideal_conv.sv:120$29_CHECK 1
(define-fun |sar_tb_working_n $formal$sar_adc_ideal_conv.sv:120$29_CHECK| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#29| state)) #b1))
; yosys-smt2-wire $formal$sar_adc_ideal_conv.sv:115$28_CHECK 1
(define-fun |sar_tb_working_n $formal$sar_adc_ideal_conv.sv:115$28_CHECK| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#40| state)) #b1))
; yosys-smt2-wire $formal$sar_adc_ideal_conv.sv:114$27_CHECK 1
(define-fun |sar_tb_working_n $formal$sar_adc_ideal_conv.sv:114$27_CHECK| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#37| state)) #b1))
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:113$26_EN#sampled$445"], "smtname": 50, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#50| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:113$26_EN#sampled$445
(define-fun |sar_tb_working#51| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (|sar_tb_working#33| state) (|sar_tb_working#48| state) (|sar_tb_working#50| state))) ; $formal$sar_adc_ideal_conv.sv:113$26_EN
; yosys-smt2-wire $formal$sar_adc_ideal_conv.sv:113$26_EN 1
(define-fun |sar_tb_working_n $formal$sar_adc_ideal_conv.sv:113$26_EN| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#51| state)) #b1))
; yosys-smt2-wire $formal$sar_adc_ideal_conv.sv:113$26_CHECK 1
(define-fun |sar_tb_working_n $formal$sar_adc_ideal_conv.sv:113$26_CHECK| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#34| state)) #b1))
; yosys-smt2-wire $formal$sar_adc_ideal_conv.sv:103$25_CHECK 1
(define-fun |sar_tb_working_n $formal$sar_adc_ideal_conv.sv:103$25_CHECK| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#46| state)) #b1))
; yosys-smt2-witness {"offset": 0, "path": ["$auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:101$24_EN#sampled$385"], "smtname": 52, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |sar_tb_working#52| (|sar_tb_working_s|) (_ BitVec 1)) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:101$24_EN#sampled$385
(define-fun |sar_tb_working#53| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (|sar_tb_working#4| state) (|sar_tb_working#48| state) (|sar_tb_working#52| state))) ; $formal$sar_adc_ideal_conv.sv:101$24_EN
; yosys-smt2-wire $formal$sar_adc_ideal_conv.sv:101$24_EN 1
(define-fun |sar_tb_working_n $formal$sar_adc_ideal_conv.sv:101$24_EN| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#53| state)) #b1))
; yosys-smt2-wire $formal$sar_adc_ideal_conv.sv:101$24_CHECK 1
(define-fun |sar_tb_working_n $formal$sar_adc_ideal_conv.sv:101$24_CHECK| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#43| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/sys_counter#sampled$365 32
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$/sys_counter#sampled$365| ((state |sar_tb_working_s|)) (_ BitVec 32) (|sar_tb_working#0| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/hit_eoc#sampled$405 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$/hit_eoc#sampled$405| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#11| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/held_value#sampled$485 10
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$/held_value#sampled$485| ((state |sar_tb_working_s|)) (_ BitVec 10) (|sar_tb_working#14| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/eoc_high_counter#sampled$415 32
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$/eoc_high_counter#sampled$415| ((state |sar_tb_working_s|)) (_ BitVec 32) (|sar_tb_working#20| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$/cycles#sampled$355 64
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$/cycles#sampled$355| ((state |sar_tb_working_s|)) (_ BitVec 64) (|sar_tb_working#24| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$1'1#sampled$387 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$1'1#sampled$387| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#48| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:120$29_EN#sampled$465 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:120$29_EN#sampled$465| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#47| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:120$29_CHECK#sampled$475 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:120$29_CHECK#sampled$475| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#27| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:115$28_CHECK#sampled$425 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:115$28_CHECK#sampled$425| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#38| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:114$27_CHECK#sampled$435 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:114$27_CHECK#sampled$435| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#35| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:113$26_EN#sampled$445 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:113$26_EN#sampled$445| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#50| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:113$26_CHECK#sampled$455 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:113$26_CHECK#sampled$455| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#30| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:103$25_CHECK#sampled$375 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:103$25_CHECK#sampled$375| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#44| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:101$24_EN#sampled$385 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:101$24_EN#sampled$385| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#52| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:101$24_CHECK#sampled$395 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:101$24_CHECK#sampled$395| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#41| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/sys_counter[31:0]#sampled$367 32
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0/sys_counter[31:0]#sampled$367| ((state |sar_tb_working_s|)) (_ BitVec 32) (|sar_tb_working#1| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/hit_eoc[0:0]#sampled$407 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0/hit_eoc[0:0]#sampled$407| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#12| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/held_value[9:0]#sampled$487 10
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0/held_value[9:0]#sampled$487| ((state |sar_tb_working_s|)) (_ BitVec 10) (|sar_tb_working#15| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/eoc_high_counter[31:0]#sampled$417 32
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0/eoc_high_counter[31:0]#sampled$417| ((state |sar_tb_working_s|)) (_ BitVec 32) (|sar_tb_working#21| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0/cycles[63:0]#sampled$357 64
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0/cycles[63:0]#sampled$357| ((state |sar_tb_working_s|)) (_ BitVec 64) (|sar_tb_working#25| state))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:120$29_CHECK[0:0]$99#sampled$477 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:120$29_CHECK[0:0]$99#sampled$477| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#28| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:115$28_CHECK[0:0]$85#sampled$427 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:115$28_CHECK[0:0]$85#sampled$427| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#39| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:114$27_CHECK[0:0]$83#sampled$437 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:114$27_CHECK[0:0]$83#sampled$437| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#36| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:113$26_CHECK[0:0]$81#sampled$457 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:113$26_CHECK[0:0]$81#sampled$457| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#31| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:103$25_CHECK[0:0]$64#sampled$377 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:103$25_CHECK[0:0]$64#sampled$377| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#45| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:101$24_CHECK[0:0]$62#sampled$397 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:101$24_CHECK[0:0]$62#sampled$397| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#42| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:74:sample_control_edge$/sys_clk#sampled$369 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:74:sample_control_edge$/sys_clk#sampled$369| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#3| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:74:sample_control_edge$/eoc#sampled$429 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:74:sample_control_edge$/eoc#sampled$429| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#32| state)) #b1))
; yosys-smt2-register $auto$clk2fflogic.cc:74:sample_control_edge$/clk#sampled$359 1
(define-fun |sar_tb_working_n $auto$clk2fflogic.cc:74:sample_control_edge$/clk#sampled$359| ((state |sar_tb_working_s|)) Bool (= ((_ extract 0 0) (|sar_tb_working#16| state)) #b1))
(define-fun |sar_tb_working#54| ((state |sar_tb_working_s|)) Bool (bvuge (|sar_tb_working#5| state) #b00000000000000000000000000000010)) ; $ge$sar_adc_ideal_conv.sv:77$48_Y
(define-fun |sar_tb_working#55| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#54| state) #b1 #b0) (ite (|sar_tb_working#6| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:77$20_CHECK[0:0]$37
; yosys-smt2-assume 0 reset_if_count
(define-fun |sar_tb_working_u 0| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#55| state)) #b1) (not true))) ; reset_if_count
; yosys-smt2-assert 0 fwd_eoc
(define-fun |sar_tb_working_a 0| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#43| state)) #b1) (not (= ((_ extract 0 0) (|sar_tb_working#53| state)) #b1)))) ; fwd_eoc
(define-fun |sar_tb_working#56| ((state |sar_tb_working_s|)) Bool (not (or  (|sar_tb_working#6| state) false))) ; $logic_not$sar_adc_ideal_conv.sv:123$105_Y
(define-fun |sar_tb_working#57| ((state |sar_tb_working_s|)) Bool (bvult (|sar_tb_working#5| state) #b00000000000000000000000000000010)) ; $lt$sar_adc_ideal_conv.sv:76$46_Y
(define-fun |sar_tb_working#58| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#56| state) #b1 #b0) (ite (|sar_tb_working#57| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:76$19_CHECK[0:0]$35
; yosys-smt2-assume 1 count_if_reset
(define-fun |sar_tb_working_u 1| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#58| state)) #b1) (not true))) ; count_if_reset
; yosys-smt2-assert 1 bmc_range_for
(define-fun |sar_tb_working_a 1| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#29| state)) #b1) (not (= ((_ extract 0 0) (|sar_tb_working#49| state)) #b1)))) ; bmc_range_for
; yosys-smt2-assert 2 bk_eoc
(define-fun |sar_tb_working_a 2| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#46| state)) #b1) (not (= ((_ extract 0 0) (|sar_tb_working#53| state)) #b1)))) ; bk_eoc
(define-fun |sar_tb_working#59| ((state |sar_tb_working_s|)) Bool (bvugt (|sar_tb_working#9| state) #b0001100100)) ; $gt$sar_adc_ideal_conv.sv:83$58_Y
(define-fun |sar_tb_working#60| ((state |sar_tb_working_s|)) Bool (bvult (|sar_tb_working#9| state) #b0110100111)) ; $lt$sar_adc_ideal_conv.sv:83$59_Y
(define-fun |sar_tb_working#61| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvand (ite (|sar_tb_working#59| state) #b1 #b0) (ite (|sar_tb_working#60| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:81$23_CHECK[0:0]$43
; yosys-smt2-assume 2 $assume$sar_adc_ideal_conv.sv:81$119 sar_adc_ideal_conv.sv:81.58-83.69
(define-fun |sar_tb_working_u 2| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#61| state)) #b1) (not true))) ; $assume$sar_adc_ideal_conv.sv:81$119
(define-fun |sar_tb_working#62| ((state |sar_tb_working_s|)) Bool (bvugt (|sar_tb_working#26| state) #b0000000000000000000000000000000000000000000000000000000000000000)) ; $gt$sar_adc_ideal_conv.sv:80$50_Y
(define-fun |sar_tb_working#63| ((state |sar_tb_working_s|)) Bool (not (or  (|sar_tb_working#10| state) false))) ; $logic_not$sar_adc_ideal_conv.sv:81$56_Y
(define-fun |sar_tb_working#64| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#62| state) #b1 #b0) (ite (|sar_tb_working#63| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:80$22_CHECK[0:0]$41
; yosys-smt2-assume 3 $assume$sar_adc_ideal_conv.sv:80$118 sar_adc_ideal_conv.sv:80.58-81.57
(define-fun |sar_tb_working_u 3| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#64| state)) #b1) (not true))) ; $assume$sar_adc_ideal_conv.sv:80$118
(define-fun |sar_tb_working#65| ((state |sar_tb_working_s|)) Bool (not (or  (|sar_tb_working#62| state) false))) ; $logic_not$sar_adc_ideal_conv.sv:80$51_Y
(define-fun |sar_tb_working#66| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#65| state) #b1 #b0) (ite (|sar_tb_working#10| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:77$21_CHECK[0:0]$39
; yosys-smt2-assume 4 $assume$sar_adc_ideal_conv.sv:77$117 sar_adc_ideal_conv.sv:77.56-80.57
(define-fun |sar_tb_working_u 4| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#66| state)) #b1) (not true))) ; $assume$sar_adc_ideal_conv.sv:77$117
(define-fun |sar_tb_working#67| ((state |sar_tb_working_s|)) Bool (not (or  (= ((_ extract 0 0) (|sar_tb_working#19| state)) #b1) (= ((_ extract 1 1) (|sar_tb_working#19| state)) #b1) (= ((_ extract 2 2) (|sar_tb_working#19| state)) #b1) (= ((_ extract 3 3) (|sar_tb_working#19| state)) #b1) (= ((_ extract 4 4) (|sar_tb_working#19| state)) #b1) (= ((_ extract 5 5) (|sar_tb_working#19| state)) #b1) (= ((_ extract 6 6) (|sar_tb_working#19| state)) #b1) (= ((_ extract 7 7) (|sar_tb_working#19| state)) #b1) (= ((_ extract 8 8) (|sar_tb_working#19| state)) #b1) (= ((_ extract 9 9) (|sar_tb_working#19| state)) #b1)))) ; $0$formal$sar_adc_ideal_conv.sv:68$17_CHECK[0:0]$138
(define-fun |sar_tb_working#68| ((state |sar_tb_working_s|)) Bool (|sar_tb_working_is| state)) ; $0$formal$sar_adc_ideal_conv.sv:57$3_EN[0:0]$125
; yosys-smt2-assume 5 $assume$sar_adc_ideal_conv.sv:68$116 sar_adc_ideal_conv.sv:68.27-69.29
(define-fun |sar_tb_working_u 5| ((state |sar_tb_working_s|)) Bool (or (|sar_tb_working#67| state) (not (|sar_tb_working#68| state)))) ; $assume$sar_adc_ideal_conv.sv:68$116
(define-fun |sar_tb_working#69| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvnot (|sar_tb_working#13| state))) ; $0$formal$sar_adc_ideal_conv.sv:67$15_CHECK[0:0]$136
; yosys-smt2-assume 6 $assume$sar_adc_ideal_conv.sv:67$115 sar_adc_ideal_conv.sv:67.36-68.26
(define-fun |sar_tb_working_u 6| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#69| state)) #b1) (not (|sar_tb_working#68| state)))) ; $assume$sar_adc_ideal_conv.sv:67$115
(define-fun |sar_tb_working#70| ((state |sar_tb_working_s|)) Bool (not (or  (= ((_ extract 0 0) (|sar_tb_working#22| state)) #b1) (= ((_ extract 1 1) (|sar_tb_working#22| state)) #b1) (= ((_ extract 2 2) (|sar_tb_working#22| state)) #b1) (= ((_ extract 3 3) (|sar_tb_working#22| state)) #b1) (= ((_ extract 4 4) (|sar_tb_working#22| state)) #b1) (= ((_ extract 5 5) (|sar_tb_working#22| state)) #b1) (= ((_ extract 6 6) (|sar_tb_working#22| state)) #b1) (= ((_ extract 7 7) (|sar_tb_working#22| state)) #b1) (= ((_ extract 8 8) (|sar_tb_working#22| state)) #b1) (= ((_ extract 9 9) (|sar_tb_working#22| state)) #b1) (= ((_ extract 10 10) (|sar_tb_working#22| state)) #b1) (= ((_ extract 11 11) (|sar_tb_working#22| state)) #b1) (= ((_ extract 12 12) (|sar_tb_working#22| state)) #b1) (= ((_ extract 13 13) (|sar_tb_working#22| state)) #b1) (= ((_ extract 14 14) (|sar_tb_working#22| state)) #b1) (= ((_ extract 15 15) (|sar_tb_working#22| state)) #b1) (= ((_ extract 16 16) (|sar_tb_working#22| state)) #b1) (= ((_ extract 17 17) (|sar_tb_working#22| state)) #b1) (= ((_ extract 18 18) (|sar_tb_working#22| state)) #b1) (= ((_ extract 19 19) (|sar_tb_working#22| state)) #b1) (= ((_ extract 20 20) (|sar_tb_working#22| state)) #b1) (= ((_ extract 21 21) (|sar_tb_working#22| state)) #b1) (= ((_ extract 22 22) (|sar_tb_working#22| state)) #b1) (= ((_ extract 23 23) (|sar_tb_working#22| state)) #b1) (= ((_ extract 24 24) (|sar_tb_working#22| state)) #b1) (= ((_ extract 25 25) (|sar_tb_working#22| state)) #b1) (= ((_ extract 26 26) (|sar_tb_working#22| state)) #b1) (= ((_ extract 27 27) (|sar_tb_working#22| state)) #b1) (= ((_ extract 28 28) (|sar_tb_working#22| state)) #b1) (= ((_ extract 29 29) (|sar_tb_working#22| state)) #b1) (= ((_ extract 30 30) (|sar_tb_working#22| state)) #b1) (= ((_ extract 31 31) (|sar_tb_working#22| state)) #b1)))) ; $0$formal$sar_adc_ideal_conv.sv:66$13_CHECK[0:0]$134
; yosys-smt2-assume 7 $assume$sar_adc_ideal_conv.sv:66$114 sar_adc_ideal_conv.sv:66.27-67.35
(define-fun |sar_tb_working_u 7| ((state |sar_tb_working_s|)) Bool (or (|sar_tb_working#70| state) (not (|sar_tb_working#68| state)))) ; $assume$sar_adc_ideal_conv.sv:66$114
(define-fun |sar_tb_working#71| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvnot (ite (|sar_tb_working#2| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:64$11_CHECK[0:0]$132
; yosys-smt2-assume 8 $assume$sar_adc_ideal_conv.sv:64$113 sar_adc_ideal_conv.sv:64.26-66.26
(define-fun |sar_tb_working_u 8| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#71| state)) #b1) (not (|sar_tb_working#68| state)))) ; $assume$sar_adc_ideal_conv.sv:64$113
(define-fun |sar_tb_working#72| ((state |sar_tb_working_s|)) Bool (not (or  (= ((_ extract 0 0) (|sar_tb_working#26| state)) #b1) (= ((_ extract 1 1) (|sar_tb_working#26| state)) #b1) (= ((_ extract 2 2) (|sar_tb_working#26| state)) #b1) (= ((_ extract 3 3) (|sar_tb_working#26| state)) #b1) (= ((_ extract 4 4) (|sar_tb_working#26| state)) #b1) (= ((_ extract 5 5) (|sar_tb_working#26| state)) #b1) (= ((_ extract 6 6) (|sar_tb_working#26| state)) #b1) (= ((_ extract 7 7) (|sar_tb_working#26| state)) #b1) (= ((_ extract 8 8) (|sar_tb_working#26| state)) #b1) (= ((_ extract 9 9) (|sar_tb_working#26| state)) #b1) (= ((_ extract 10 10) (|sar_tb_working#26| state)) #b1) (= ((_ extract 11 11) (|sar_tb_working#26| state)) #b1) (= ((_ extract 12 12) (|sar_tb_working#26| state)) #b1) (= ((_ extract 13 13) (|sar_tb_working#26| state)) #b1) (= ((_ extract 14 14) (|sar_tb_working#26| state)) #b1) (= ((_ extract 15 15) (|sar_tb_working#26| state)) #b1) (= ((_ extract 16 16) (|sar_tb_working#26| state)) #b1) (= ((_ extract 17 17) (|sar_tb_working#26| state)) #b1) (= ((_ extract 18 18) (|sar_tb_working#26| state)) #b1) (= ((_ extract 19 19) (|sar_tb_working#26| state)) #b1) (= ((_ extract 20 20) (|sar_tb_working#26| state)) #b1) (= ((_ extract 21 21) (|sar_tb_working#26| state)) #b1) (= ((_ extract 22 22) (|sar_tb_working#26| state)) #b1) (= ((_ extract 23 23) (|sar_tb_working#26| state)) #b1) (= ((_ extract 24 24) (|sar_tb_working#26| state)) #b1) (= ((_ extract 25 25) (|sar_tb_working#26| state)) #b1) (= ((_ extract 26 26) (|sar_tb_working#26| state)) #b1) (= ((_ extract 27 27) (|sar_tb_working#26| state)) #b1) (= ((_ extract 28 28) (|sar_tb_working#26| state)) #b1) (= ((_ extract 29 29) (|sar_tb_working#26| state)) #b1) (= ((_ extract 30 30) (|sar_tb_working#26| state)) #b1) (= ((_ extract 31 31) (|sar_tb_working#26| state)) #b1) (= ((_ extract 32 32) (|sar_tb_working#26| state)) #b1) (= ((_ extract 33 33) (|sar_tb_working#26| state)) #b1) (= ((_ extract 34 34) (|sar_tb_working#26| state)) #b1) (= ((_ extract 35 35) (|sar_tb_working#26| state)) #b1) (= ((_ extract 36 36) (|sar_tb_working#26| state)) #b1) (= ((_ extract 37 37) (|sar_tb_working#26| state)) #b1) (= ((_ extract 38 38) (|sar_tb_working#26| state)) #b1) (= ((_ extract 39 39) (|sar_tb_working#26| state)) #b1) (= ((_ extract 40 40) (|sar_tb_working#26| state)) #b1) (= ((_ extract 41 41) (|sar_tb_working#26| state)) #b1) (= ((_ extract 42 42) (|sar_tb_working#26| state)) #b1) (= ((_ extract 43 43) (|sar_tb_working#26| state)) #b1) (= ((_ extract 44 44) (|sar_tb_working#26| state)) #b1) (= ((_ extract 45 45) (|sar_tb_working#26| state)) #b1) (= ((_ extract 46 46) (|sar_tb_working#26| state)) #b1) (= ((_ extract 47 47) (|sar_tb_working#26| state)) #b1) (= ((_ extract 48 48) (|sar_tb_working#26| state)) #b1) (= ((_ extract 49 49) (|sar_tb_working#26| state)) #b1) (= ((_ extract 50 50) (|sar_tb_working#26| state)) #b1) (= ((_ extract 51 51) (|sar_tb_working#26| state)) #b1) (= ((_ extract 52 52) (|sar_tb_working#26| state)) #b1) (= ((_ extract 53 53) (|sar_tb_working#26| state)) #b1) (= ((_ extract 54 54) (|sar_tb_working#26| state)) #b1) (= ((_ extract 55 55) (|sar_tb_working#26| state)) #b1) (= ((_ extract 56 56) (|sar_tb_working#26| state)) #b1) (= ((_ extract 57 57) (|sar_tb_working#26| state)) #b1) (= ((_ extract 58 58) (|sar_tb_working#26| state)) #b1) (= ((_ extract 59 59) (|sar_tb_working#26| state)) #b1) (= ((_ extract 60 60) (|sar_tb_working#26| state)) #b1) (= ((_ extract 61 61) (|sar_tb_working#26| state)) #b1) (= ((_ extract 62 62) (|sar_tb_working#26| state)) #b1) (= ((_ extract 63 63) (|sar_tb_working#26| state)) #b1)))) ; $0$formal$sar_adc_ideal_conv.sv:62$9_CHECK[0:0]$130
; yosys-smt2-assume 9 $assume$sar_adc_ideal_conv.sv:62$112 sar_adc_ideal_conv.sv:62.31-64.25
(define-fun |sar_tb_working_u 9| ((state |sar_tb_working_s|)) Bool (or (|sar_tb_working#72| state) (not (|sar_tb_working#68| state)))) ; $assume$sar_adc_ideal_conv.sv:62$112
(define-fun |sar_tb_working#73| ((state |sar_tb_working_s|)) Bool (not (or  (= ((_ extract 0 0) (|sar_tb_working#5| state)) #b1) (= ((_ extract 1 1) (|sar_tb_working#5| state)) #b1) (= ((_ extract 2 2) (|sar_tb_working#5| state)) #b1) (= ((_ extract 3 3) (|sar_tb_working#5| state)) #b1) (= ((_ extract 4 4) (|sar_tb_working#5| state)) #b1) (= ((_ extract 5 5) (|sar_tb_working#5| state)) #b1) (= ((_ extract 6 6) (|sar_tb_working#5| state)) #b1) (= ((_ extract 7 7) (|sar_tb_working#5| state)) #b1) (= ((_ extract 8 8) (|sar_tb_working#5| state)) #b1) (= ((_ extract 9 9) (|sar_tb_working#5| state)) #b1) (= ((_ extract 10 10) (|sar_tb_working#5| state)) #b1) (= ((_ extract 11 11) (|sar_tb_working#5| state)) #b1) (= ((_ extract 12 12) (|sar_tb_working#5| state)) #b1) (= ((_ extract 13 13) (|sar_tb_working#5| state)) #b1) (= ((_ extract 14 14) (|sar_tb_working#5| state)) #b1) (= ((_ extract 15 15) (|sar_tb_working#5| state)) #b1) (= ((_ extract 16 16) (|sar_tb_working#5| state)) #b1) (= ((_ extract 17 17) (|sar_tb_working#5| state)) #b1) (= ((_ extract 18 18) (|sar_tb_working#5| state)) #b1) (= ((_ extract 19 19) (|sar_tb_working#5| state)) #b1) (= ((_ extract 20 20) (|sar_tb_working#5| state)) #b1) (= ((_ extract 21 21) (|sar_tb_working#5| state)) #b1) (= ((_ extract 22 22) (|sar_tb_working#5| state)) #b1) (= ((_ extract 23 23) (|sar_tb_working#5| state)) #b1) (= ((_ extract 24 24) (|sar_tb_working#5| state)) #b1) (= ((_ extract 25 25) (|sar_tb_working#5| state)) #b1) (= ((_ extract 26 26) (|sar_tb_working#5| state)) #b1) (= ((_ extract 27 27) (|sar_tb_working#5| state)) #b1) (= ((_ extract 28 28) (|sar_tb_working#5| state)) #b1) (= ((_ extract 29 29) (|sar_tb_working#5| state)) #b1) (= ((_ extract 30 30) (|sar_tb_working#5| state)) #b1) (= ((_ extract 31 31) (|sar_tb_working#5| state)) #b1)))) ; $0$formal$sar_adc_ideal_conv.sv:60$7_CHECK[0:0]$128
; yosys-smt2-assume 10 $assume$sar_adc_ideal_conv.sv:60$111 sar_adc_ideal_conv.sv:60.41-62.30
(define-fun |sar_tb_working_u 10| ((state |sar_tb_working_s|)) Bool (or (|sar_tb_working#73| state) (not (|sar_tb_working#68| state)))) ; $assume$sar_adc_ideal_conv.sv:60$111
(define-fun |sar_tb_working#74| ((state |sar_tb_working_s|)) Bool (distinct (|sar_tb_working#5| state) #b00000000000000000000000000000000)) ; $ne$sar_adc_ideal_conv.sv:60$143_Y
(define-fun |sar_tb_working#75| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#74| state) #b1 #b0) (ite (|sar_tb_working#6| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:59$5_CHECK[0:0]$126
; yosys-smt2-assume 11 $assume$sar_adc_ideal_conv.sv:59$110 sar_adc_ideal_conv.sv:59.42-60.40
(define-fun |sar_tb_working_u 11| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#75| state)) #b1) (not (|sar_tb_working#68| state)))) ; $assume$sar_adc_ideal_conv.sv:59$110
(define-fun |sar_tb_working#76| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#56| state) #b1 #b0) (ite (|sar_tb_working#73| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:57$3_CHECK[0:0]$124
; yosys-smt2-assume 12 $assume$sar_adc_ideal_conv.sv:57$109 sar_adc_ideal_conv.sv:57.14-59.41
(define-fun |sar_tb_working_u 12| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#76| state)) #b1) (not (|sar_tb_working#68| state)))) ; $assume$sar_adc_ideal_conv.sv:57$109
; yosys-smt2-assert 3 $assert$sar_adc_ideal_conv.sv:115$122 sar_adc_ideal_conv.sv:115.144-116.97
(define-fun |sar_tb_working_a 3| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#40| state)) #b1) (not (= ((_ extract 0 0) (|sar_tb_working#51| state)) #b1)))) ; $assert$sar_adc_ideal_conv.sv:115$122
; yosys-smt2-assert 4 $assert$sar_adc_ideal_conv.sv:114$121 sar_adc_ideal_conv.sv:114.92-115.143
(define-fun |sar_tb_working_a 4| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#37| state)) #b1) (not (= ((_ extract 0 0) (|sar_tb_working#51| state)) #b1)))) ; $assert$sar_adc_ideal_conv.sv:114$121
; yosys-smt2-assert 5 $assert$sar_adc_ideal_conv.sv:113$120 sar_adc_ideal_conv.sv:113.28-114.91
(define-fun |sar_tb_working_a 5| ((state |sar_tb_working_s|)) Bool (or (= ((_ extract 0 0) (|sar_tb_working#34| state)) #b1) (not (= ((_ extract 0 0) (|sar_tb_working#51| state)) #b1)))) ; $assert$sar_adc_ideal_conv.sv:113$120
(define-fun |sar_tb_working#77| ((state |sar_tb_working_s|)) Bool (= (|sar_tb_working#22| state) #b00000000000000000000000000000101)) ; $eq$sar_adc_ideal_conv.sv:101$70_Y
(define-fun |sar_tb_working#78| ((state |sar_tb_working_s|)) Bool (not (or  (|sar_tb_working#8| state) false))) ; $logic_not$sar_adc_ideal_conv.sv:103$74_Y
(define-fun |sar_tb_working#79| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#77| state) #b1 #b0) (ite (|sar_tb_working#78| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:103$25_CHECK[0:0]$64
(define-fun |sar_tb_working#80| ((state |sar_tb_working_s|)) Bool (not (or  (|sar_tb_working#77| state) false))) ; $logic_not$sar_adc_ideal_conv.sv:101$71_Y
(define-fun |sar_tb_working#81| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#80| state) #b1 #b0) (ite (|sar_tb_working#8| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:101$24_CHECK[0:0]$62
(define-fun |sar_tb_working#82| ((state |sar_tb_working_s|)) Bool (bvule ((_ extract 19 0) (|sar_tb_working#23| state)) #b00000000000010011110)) ; $le$sar_adc_ideal_conv.sv:116$94_Y
(define-fun |sar_tb_working#83| ((state |sar_tb_working_s|)) Bool (not (or  (|sar_tb_working#82| state) false))) ; $logic_not$sar_adc_ideal_conv.sv:116$95_Y
(define-fun |sar_tb_working#84| ((state |sar_tb_working_s|)) Bool (bvugt (|sar_tb_working#7| state) #b0000000000)) ; $gt$sar_adc_ideal_conv.sv:116$96_Y
(define-fun |sar_tb_working#85| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#83| state) #b1 #b0) (ite (|sar_tb_working#84| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:115$28_CHECK[0:0]$85
(define-fun |sar_tb_working#86| ((state |sar_tb_working_s|)) Bool (bvugt ((_ extract 19 0) (|sar_tb_working#23| state)) #b00000000000010011110)) ; $gt$sar_adc_ideal_conv.sv:115$89_Y
(define-fun |sar_tb_working#87| ((state |sar_tb_working_s|)) Bool (not (or  (|sar_tb_working#86| state) false))) ; $logic_not$sar_adc_ideal_conv.sv:115$90_Y
(define-fun |sar_tb_working#88| ((state |sar_tb_working_s|)) (_ BitVec 21) (bvsub (concat #b0 ((_ extract 19 0) (|sar_tb_working#23| state))) #b000000000000010011110)) ; { $sub$sar_adc_ideal_conv.sv:115$91_Y [31] $sub$sar_adc_ideal_conv.sv:115$91_Y [19:0] }
(define-fun |sar_tb_working#89| ((state |sar_tb_working_s|)) Bool (bvugt (concat #b0000000000000000000000 (|sar_tb_working#7| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (concat ((_ extract 20 20) (|sar_tb_working#88| state)) (|sar_tb_working#88| state)))))))))))))) ; $gt$sar_adc_ideal_conv.sv:115$92_Y
(define-fun |sar_tb_working#90| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#87| state) #b1 #b0) (ite (|sar_tb_working#89| state) #b1 #b0))) ; $0$formal$sar_adc_ideal_conv.sv:114$27_CHECK[0:0]$83
(define-fun |sar_tb_working#91| ((state |sar_tb_working_s|)) (_ BitVec 21) (bvadd (concat #b0 ((_ extract 19 0) (|sar_tb_working#23| state))) #b000000000000010011110)) ; $add$sar_adc_ideal_conv.sv:114$87_Y
(define-fun |sar_tb_working#92| ((state |sar_tb_working_s|)) Bool (bvult (concat #b00000000000 (|sar_tb_working#7| state)) (|sar_tb_working#91| state))) ; $0$formal$sar_adc_ideal_conv.sv:113$26_CHECK[0:0]$81
(define-fun |sar_tb_working#93| ((state |sar_tb_working_s|)) Bool (= (|sar_tb_working#26| state) #b0000000000000000000000000000000000000000000000000000000000100111)) ; $eq$sar_adc_ideal_conv.sv:120$101_Y
(define-fun |sar_tb_working#94| ((state |sar_tb_working_s|)) Bool (not (or  (|sar_tb_working#93| state) false))) ; $logic_not$sar_adc_ideal_conv.sv:120$102_Y
(define-fun |sar_tb_working#95| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvor (ite (|sar_tb_working#94| state) #b1 #b0) (|sar_tb_working#13| state))) ; $0$formal$sar_adc_ideal_conv.sv:120$29_CHECK[0:0]$99
(define-fun |sar_tb_working#96| ((state |sar_tb_working_s|)) (_ BitVec 64) (bvadd (|sar_tb_working#26| state) #b0000000000000000000000000000000000000000000000000000000000000001)) ; $0\cycles[63:0]
(define-fun |sar_tb_working#97| ((state |sar_tb_working_s|)) (_ BitVec 32) (bvadd (|sar_tb_working#22| state) #b00000000000000000000000000000001)) ; $add$sar_adc_ideal_conv.sv:95$69_Y
(define-fun |sar_tb_working#98| ((state |sar_tb_working_s|)) Bool (or  (|sar_tb_working#10| state) false  (|sar_tb_working#8| state) false)) ; $logic_or$sar_adc_ideal_conv.sv:95$66_Y
(define-fun |sar_tb_working#99| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvand (ite (|sar_tb_working#98| state) #b1 #b0) (ite (|sar_tb_working#56| state) #b1 #b0))) ; $and$sar_adc_ideal_conv.sv:95$68_Y
(define-fun |sar_tb_working#100| ((state |sar_tb_working_s|)) (_ BitVec 32) (ite (= ((_ extract 0 0) (|sar_tb_working#99| state)) #b1) (|sar_tb_working#97| state) (|sar_tb_working#22| state))) ; $0\eoc_high_counter[31:0]
(define-fun |sar_tb_working#101| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvand (ite (|sar_tb_working#10| state) #b1 #b0) (ite (|sar_tb_working#56| state) #b1 #b0))) ; $and$sar_adc_ideal_conv.sv:123$106_Y
(define-fun |sar_tb_working#102| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvand (|sar_tb_working#101| state) (ite (|sar_tb_working#67| state) #b1 #b0))) ; $and$sar_adc_ideal_conv.sv:123$108_Y
(define-fun |sar_tb_working#103| ((state |sar_tb_working_s|)) (_ BitVec 10) (ite (= ((_ extract 0 0) (|sar_tb_working#102| state)) #b1) (|sar_tb_working#9| state) (|sar_tb_working#19| state))) ; $0\held_value[9:0]
(define-fun |sar_tb_working#104| ((state |sar_tb_working_s|)) (_ BitVec 1) (bvand (|sar_tb_working#69| state) (ite (|sar_tb_working#8| state) #b1 #b0))) ; $and$sar_adc_ideal_conv.sv:108$77_Y
(define-fun |sar_tb_working#105| ((state |sar_tb_working_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|sar_tb_working#104| state)) #b1) #b1 (|sar_tb_working#13| state))) ; $0\hit_eoc[0:0]
(define-fun |sar_tb_working#106| ((state |sar_tb_working_s|)) (_ BitVec 32) (bvadd (|sar_tb_working#5| state) #b00000000000000000000000000000001)) ; $0\sys_counter[31:0]
(define-fun |sar_tb_working_a| ((state |sar_tb_working_s|)) Bool (and
  (|sar_tb_working_a 0| state)
  (|sar_tb_working_a 1| state)
  (|sar_tb_working_a 2| state)
  (|sar_tb_working_a 3| state)
  (|sar_tb_working_a 4| state)
  (|sar_tb_working_a 5| state)
  (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_a| (|sar_tb_working_h adc_instance| state))
  (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_a| (|sar_tb_working_h fdiv| state))
))
(define-fun |sar_tb_working_u| ((state |sar_tb_working_s|)) Bool (and
  (|sar_tb_working_u 0| state)
  (|sar_tb_working_u 1| state)
  (|sar_tb_working_u 2| state)
  (|sar_tb_working_u 3| state)
  (|sar_tb_working_u 4| state)
  (|sar_tb_working_u 5| state)
  (|sar_tb_working_u 6| state)
  (|sar_tb_working_u 7| state)
  (|sar_tb_working_u 8| state)
  (|sar_tb_working_u 9| state)
  (|sar_tb_working_u 10| state)
  (|sar_tb_working_u 11| state)
  (|sar_tb_working_u 12| state)
  (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_u| (|sar_tb_working_h adc_instance| state))
  (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_u| (|sar_tb_working_h fdiv| state))
))
(define-fun |sar_tb_working_i| ((state |sar_tb_working_s|)) Bool (and
  (= (= ((_ extract 0 0) (|sar_tb_working#48| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$1'1#sampled$387
  (= (= ((_ extract 0 0) (|sar_tb_working#47| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:120$29_EN#sampled$465
  (= (= ((_ extract 0 0) (|sar_tb_working#50| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:113$26_EN#sampled$445
  (= (= ((_ extract 0 0) (|sar_tb_working#52| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:101$24_EN#sampled$385
  (= (|sar_tb_working#1| state) #b00000000000000000000000000000000) ; $auto$clk2fflogic.cc:88:sample_data$$0/sys_counter[31:0]#sampled$367
  (= (= ((_ extract 0 0) (|sar_tb_working#12| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$0/hit_eoc[0:0]#sampled$407
  (= (|sar_tb_working#15| state) #b0000000000) ; $auto$clk2fflogic.cc:88:sample_data$$0/held_value[9:0]#sampled$487
  (= (|sar_tb_working#21| state) #b00000000000000000000000000000000) ; $auto$clk2fflogic.cc:88:sample_data$$0/eoc_high_counter[31:0]#sampled$417
  (= (|sar_tb_working#25| state) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$clk2fflogic.cc:88:sample_data$$0/cycles[63:0]#sampled$357
  (= (= ((_ extract 0 0) (|sar_tb_working#28| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:120$29_CHECK[0:0]$99#sampled$477
  (= (= ((_ extract 0 0) (|sar_tb_working#39| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:115$28_CHECK[0:0]$85#sampled$427
  (= (= ((_ extract 0 0) (|sar_tb_working#36| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:114$27_CHECK[0:0]$83#sampled$437
  (= (= ((_ extract 0 0) (|sar_tb_working#31| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:113$26_CHECK[0:0]$81#sampled$457
  (= (= ((_ extract 0 0) (|sar_tb_working#45| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:103$25_CHECK[0:0]$64#sampled$377
  (= (= ((_ extract 0 0) (|sar_tb_working#42| state)) #b1) false) ; $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:101$24_CHECK[0:0]$62#sampled$397
  (= (= ((_ extract 0 0) (|sar_tb_working#3| state)) #b1) true) ; $auto$clk2fflogic.cc:74:sample_control_edge$/sys_clk#sampled$369
  (= (= ((_ extract 0 0) (|sar_tb_working#32| state)) #b1) true) ; $auto$clk2fflogic.cc:74:sample_control_edge$/eoc#sampled$429
  (= (= ((_ extract 0 0) (|sar_tb_working#16| state)) #b1) true) ; $auto$clk2fflogic.cc:74:sample_control_edge$/clk#sampled$359
  (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_i| (|sar_tb_working_h adc_instance| state))
  (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_i| (|sar_tb_working_h fdiv| state))
))
(define-fun |sar_tb_working_h| ((state |sar_tb_working_s|)) Bool (and
  (= (|sar_tb_working_is| state) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_is| (|sar_tb_working_h adc_instance| state)))
  (= (|sar_tb_working#2| state) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n sys_clk| (|sar_tb_working_h adc_instance| state))) ; $paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011.sys_clk
  (= (|sar_tb_working#6| state) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n reset| (|sar_tb_working_h adc_instance| state))) ; $paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011.reset
  (= (|sar_tb_working#7| state) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n output_result_digital| (|sar_tb_working_h adc_instance| state))) ; $paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011.output_result_digital
  (= (|sar_tb_working#9| state) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n input_voltage_real| (|sar_tb_working_h adc_instance| state))) ; $paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011.input_voltage_real
  (= (|sar_tb_working#10| state) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n input_hold_digital| (|sar_tb_working_h adc_instance| state))) ; $paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011.input_hold_digital
  (= (|sar_tb_working#8| state) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n eoc| (|sar_tb_working_h adc_instance| state))) ; $paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011.eoc
  (= (= ((_ extract 0 0) (|sar_tb_working#17| state)) #b1) (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_n clk| (|sar_tb_working_h adc_instance| state))) ; $paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011.clk
  (= (|sar_tb_working_is| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_is| (|sar_tb_working_h fdiv| state)))
  (= (|sar_tb_working#6| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n reset| (|sar_tb_working_h fdiv| state))) ; $paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010.reset
  (= (|sar_tb_working#2| state) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n output_clk_digital| (|sar_tb_working_h fdiv| state))) ; $paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010.output_clk_digital
  (= (= ((_ extract 0 0) (|sar_tb_working#17| state)) #b1) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n input_clk_digital| (|sar_tb_working_h fdiv| state))) ; $paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010.input_clk_digital
  (= (= ((_ extract 0 0) (|sar_tb_working#17| state)) #b1) (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_n clk| (|sar_tb_working_h fdiv| state))) ; $paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010.clk
  (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_h| (|sar_tb_working_h adc_instance| state))
  (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_h| (|sar_tb_working_h fdiv| state))
))
(define-fun |sar_tb_working_t| ((state |sar_tb_working_s|) (next_state |sar_tb_working_s|)) Bool (and
  (= (|sar_tb_working#53| state) (|sar_tb_working#52| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$386 $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:101$24_EN#sampled$385
  (= (|sar_tb_working#51| state) (|sar_tb_working#50| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$446 $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:113$26_EN#sampled$445
  (= #b1 (|sar_tb_working#48| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$388 $auto$clk2fflogic.cc:88:sample_data$1'1#sampled$387
  (= (|sar_tb_working#49| state) (|sar_tb_working#47| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$466 $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:120$29_EN#sampled$465
  (= (|sar_tb_working#79| state) (|sar_tb_working#45| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$378 $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:103$25_CHECK[0:0]$64#sampled$377
  (= (|sar_tb_working#46| state) (|sar_tb_working#44| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$376 $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:103$25_CHECK#sampled$375
  (= (|sar_tb_working#81| state) (|sar_tb_working#42| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$398 $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:101$24_CHECK[0:0]$62#sampled$397
  (= (|sar_tb_working#43| state) (|sar_tb_working#41| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$396 $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:101$24_CHECK#sampled$395
  (= (|sar_tb_working#85| state) (|sar_tb_working#39| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$428 $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:115$28_CHECK[0:0]$85#sampled$427
  (= (|sar_tb_working#40| state) (|sar_tb_working#38| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$426 $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:115$28_CHECK#sampled$425
  (= (|sar_tb_working#90| state) (|sar_tb_working#36| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$438 $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:114$27_CHECK[0:0]$83#sampled$437
  (= (|sar_tb_working#37| state) (|sar_tb_working#35| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$436 $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:114$27_CHECK#sampled$435
  (= (ite (|sar_tb_working#8| state) #b1 #b0) (|sar_tb_working#32| next_state)) ; $auto$clk2fflogic.cc:79:sample_control_edge$430 $auto$clk2fflogic.cc:74:sample_control_edge$\eoc#sampled$429
  (= (ite (|sar_tb_working#92| state) #b1 #b0) (|sar_tb_working#31| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$458 $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:113$26_CHECK[0:0]$81#sampled$457
  (= (|sar_tb_working#34| state) (|sar_tb_working#30| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$456 $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:113$26_CHECK#sampled$455
  (= (|sar_tb_working#95| state) (|sar_tb_working#28| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$478 $auto$clk2fflogic.cc:88:sample_data$$0$formal$sar_adc_ideal_conv.sv:120$29_CHECK[0:0]$99#sampled$477
  (= (|sar_tb_working#29| state) (|sar_tb_working#27| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$476 $auto$clk2fflogic.cc:88:sample_data$$formal$sar_adc_ideal_conv.sv:120$29_CHECK#sampled$475
  (= (|sar_tb_working#96| state) (|sar_tb_working#25| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$358 $auto$clk2fflogic.cc:88:sample_data$$0\cycles[63:0]#sampled$357
  (= (|sar_tb_working#26| state) (|sar_tb_working#24| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$356 $auto$clk2fflogic.cc:88:sample_data$\cycles#sampled$355
  (= (|sar_tb_working#100| state) (|sar_tb_working#21| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$418 $auto$clk2fflogic.cc:88:sample_data$$0\eoc_high_counter[31:0]#sampled$417
  (= (|sar_tb_working#22| state) (|sar_tb_working#20| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$416 $auto$clk2fflogic.cc:88:sample_data$\eoc_high_counter#sampled$415
  (= (|sar_tb_working#17| state) (|sar_tb_working#16| next_state)) ; $auto$clk2fflogic.cc:79:sample_control_edge$360 $auto$clk2fflogic.cc:74:sample_control_edge$\clk#sampled$359
  (= (|sar_tb_working#103| state) (|sar_tb_working#15| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$488 $auto$clk2fflogic.cc:88:sample_data$$0\held_value[9:0]#sampled$487
  (= (|sar_tb_working#19| state) (|sar_tb_working#14| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$486 $auto$clk2fflogic.cc:88:sample_data$\held_value#sampled$485
  (= (|sar_tb_working#105| state) (|sar_tb_working#12| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$408 $auto$clk2fflogic.cc:88:sample_data$$0\hit_eoc[0:0]#sampled$407
  (= (|sar_tb_working#13| state) (|sar_tb_working#11| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$406 $auto$clk2fflogic.cc:88:sample_data$\hit_eoc#sampled$405
  (= (ite (|sar_tb_working#2| state) #b1 #b0) (|sar_tb_working#3| next_state)) ; $auto$clk2fflogic.cc:79:sample_control_edge$370 $auto$clk2fflogic.cc:74:sample_control_edge$\sys_clk#sampled$369
  (= (|sar_tb_working#106| state) (|sar_tb_working#1| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$368 $auto$clk2fflogic.cc:88:sample_data$$0\sys_counter[31:0]#sampled$367
  (= (|sar_tb_working#5| state) (|sar_tb_working#0| next_state)) ; $auto$clk2fflogic.cc:95:sample_data$366 $auto$clk2fflogic.cc:88:sample_data$\sys_counter#sampled$365
  (|$paramod/sar_adc__N_BITS_10/N_BITS=s32'00000000000000000000000000000011_t| (|sar_tb_working_h adc_instance| state) (|sar_tb_working_h adc_instance| next_state))
  (|$paramod/frequency_divider/DIVISION=s32'00000000000000000000000000000010_t| (|sar_tb_working_h fdiv| state) (|sar_tb_working_h fdiv| next_state))
)) ; end of module sar_tb_working
; yosys-smt2-topmod sar_tb_working
; end of yosys output
