//-------------------------------------------------------------------------
// sar_adc__N_BITS_10.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL VerilogPlaceholder sar_adc Definition
// At /home/will/Desktop/AchourLab/AnalogBenChmark/benchmarks/sar_adc_nonideal_comparator/sar_adc.py

//***********************************************************
// Pickled source file of placeholder sar_adc__N_BITS_10
//***********************************************************

//-----------------------------------------------------------
// Dependency of placeholder sar_adc
//-----------------------------------------------------------

`ifndef SAR_ADC
`define SAR_ADC

// The source code below are included because they are specified
// as the v_libs Verilog placeholder option of component sar_adc__N_BITS_10.

// If you get a duplicated def error from files included below, please
// make sure they are included either through the v_libs option or the
// explicit `include statement in the Verilog source code -- if they
// appear in both then they will be included twice!


// End of all v_libs files for component sar_adc__N_BITS_10

`line 1 "sar_adc.v" 0
`line 1 "./comparator_latch.v" 0





module comparator_latch #
(
  parameter n_to_response_time = -1038,
  parameter p_to_response_time = -1020,
  parameter const_response_time = 1285,
  parameter n_to_tau = -1248,
  parameter p_to_tau = 1037,
  parameter const_tau = 1042,
  parameter n_to_response_time_lh = -1752,
  parameter p_to_response_time_lh = -1006,
  parameter const_response_time_lh = 1185,
  parameter n_to_tau_lh = 1131,
  parameter p_to_tau_lh = -1115,
  parameter const_tau_lh = 1529
)
(
  input clk,
  input reset,
  input sys_clk,
  input [10-1:0] n,
  input [10-1:0] p,
  output [10-1:0] out
);

  reg [17-1:0] state_cycle_counter;
  reg [1-1:0] prev_sys_clk;
  reg [35-1:0] o;
  wire [32-1:0] wait_time;
  wire [51-1:0] tau;
  wire [36-1:0] dvdt;
  wire [32-1:0] wait_time_lh;
  wire [59-1:0] tau_lh;
  wire [37-1:0] dodt;
  reg [32-1:0] fsm;
  localparam fsm_init = 0;
  wire [35-1:0] padr_0;
  wire [20-1:0] padr_bits_1;
  assign padr_bits_1 = 0;
  wire [21-1:0] truncR_2;
  wire [21-1:0] padl_3;
  wire [19-1:0] padl_bits_4;
  wire [1-1:0] toSInt_5;
  assign toSInt_5 = 0;
  wire [19-1:0] toSInt_imm_6;
  wire [18-1:0] const_7;
  assign const_7 = 18'd216268;
  assign toSInt_imm_6 = { toSInt_5, const_7 };
  assign padl_bits_4 = toSInt_imm_6;
  assign padl_3 = { { 2{ padl_bits_4[18] } }, padl_bits_4 };
  assign truncR_2 = padl_3;
  wire [15-1:0] truncR_shift_8;
  assign truncR_shift_8 = truncR_2 >>> 6;
  wire [15-1:0] truncR_imm_9;
  assign truncR_imm_9 = (truncR_2[20])? truncR_shift_8[14:0] : truncR_2[20:6];
  assign padr_0 = { truncR_imm_9, padr_bits_1 };
  wire [13-1:0] truncR_10;
  wire [14-1:0] truncval_11;
  wire [15-1:0] toUsInt_12;
  wire [35-1:0] truncR_13;
  assign truncR_13 = o;
  wire [15-1:0] truncR_shift_14;
  assign truncR_shift_14 = truncR_13 >>> 20;
  wire [15-1:0] truncR_imm_15;
  assign truncR_imm_15 = (truncR_13[34])? truncR_shift_14[14:0] : truncR_13[34:20];
  assign toUsInt_12 = truncR_imm_15;
  assign truncval_11 = toUsInt_12[11:0];
  assign truncR_10 = truncval_11[12:0];
  wire [32-1:0] padl_16;
  wire [18-1:0] padl_bits_17;
  wire [28-1:0] truncR_18;
  wire [28-1:0] padl_19;
  wire [13-1:0] padl_bits_20;
  wire [79-1:0] truncR_21;
  wire [146-1:0] truncval_22;
  wire [146-1:0] padl_23;
  wire [81-1:0] padl_bits_24;
  wire [81-1:0] padl_25;
  wire [48-1:0] padl_bits_26;
  wire [98-1:0] truncR_27;
  wire [105-1:0] truncval_28;
  wire [105-1:0] padl_29;
  wire [52-1:0] padl_bits_30;
  wire [52-1:0] padr_31;
  wire [41-1:0] padr_bits_32;
  assign padr_bits_32 = 0;
  wire [1-1:0] toSInt_33;
  assign toSInt_33 = 0;
  wire [11-1:0] toSInt_imm_34;
  assign toSInt_imm_34 = { toSInt_33, n };
  assign padr_31 = { toSInt_imm_34, padr_bits_32 };
  assign padl_bits_30 = padr_31;
  assign padl_29 = { { 53{ padl_bits_30[51] } }, padl_bits_30 };
  wire [105-1:0] padl_35;
  wire [52-1:0] padl_bits_36;
  wire [52-1:0] padl_37;
  wire [50-1:0] padl_bits_38;
  wire [50-1:0] param_39;
  assign param_39 = n_to_response_time;
  assign padl_bits_38 = param_39;
  assign padl_37 = { { 2{ padl_bits_38[49] } }, padl_bits_38 };
  assign padl_bits_36 = padl_37;
  assign padl_35 = { { 53{ padl_bits_36[51] } }, padl_bits_36 };
  assign truncval_28 = padl_29 * padl_35;
  wire [98-1:0] truncval_imm_40;
  assign truncval_imm_40 = { truncval_28[104], truncval_28[96:0] };
  assign truncR_27 = truncval_imm_40;
  wire [48-1:0] truncR_shift_41;
  assign truncR_shift_41 = truncR_27 >>> 50;
  wire [48-1:0] truncR_imm_42;
  assign truncR_imm_42 = (truncR_27[97])? truncR_shift_41[47:0] : truncR_27[97:50];
  wire [48-1:0] padr_43;
  wire [2-1:0] padr_bits_44;
  assign padr_bits_44 = 0;
  wire [94-1:0] truncR_45;
  wire [101-1:0] truncval_46;
  wire [101-1:0] padl_47;
  wire [50-1:0] padl_bits_48;
  wire [50-1:0] padr_49;
  wire [39-1:0] padr_bits_50;
  assign padr_bits_50 = 0;
  wire [1-1:0] toSInt_51;
  assign toSInt_51 = 0;
  wire [11-1:0] toSInt_imm_52;
  assign toSInt_imm_52 = { toSInt_51, p };
  assign padr_49 = { toSInt_imm_52, padr_bits_50 };
  assign padl_bits_48 = padr_49;
  assign padl_47 = { { 51{ padl_bits_48[49] } }, padl_bits_48 };
  wire [101-1:0] padl_53;
  wire [50-1:0] padl_bits_54;
  wire [50-1:0] padl_55;
  wire [48-1:0] padl_bits_56;
  wire [48-1:0] param_57;
  assign param_57 = p_to_response_time;
  assign padl_bits_56 = param_57;
  assign padl_55 = { { 2{ padl_bits_56[47] } }, padl_bits_56 };
  assign padl_bits_54 = padl_55;
  assign padl_53 = { { 51{ padl_bits_54[49] } }, padl_bits_54 };
  assign truncval_46 = padl_47 * padl_53;
  wire [94-1:0] truncval_imm_58;
  assign truncval_imm_58 = { truncval_46[100], truncval_46[92:0] };
  assign truncR_45 = truncval_imm_58;
  wire [46-1:0] truncR_shift_59;
  assign truncR_shift_59 = truncR_45 >>> 48;
  wire [46-1:0] truncR_imm_60;
  assign truncR_imm_60 = (truncR_45[93])? truncR_shift_59[45:0] : truncR_45[93:48];
  assign padr_43 = { truncR_imm_60, padr_bits_44 };
  wire [48-1:0] padr_61;
  wire [4-1:0] padr_bits_62;
  assign padr_bits_62 = 0;
  wire [44-1:0] padl_63;
  wire [43-1:0] padl_bits_64;
  wire [1-1:0] toSInt_65;
  assign toSInt_65 = 0;
  wire [43-1:0] toSInt_imm_66;
  wire [42-1:0] param_67;
  assign param_67 = const_response_time;
  assign toSInt_imm_66 = { toSInt_65, param_67 };
  assign padl_bits_64 = toSInt_imm_66;
  assign padl_63 = { { 1{ padl_bits_64[42] } }, padl_bits_64 };
  assign padr_61 = { padl_63, padr_bits_62 };
  assign padl_bits_26 = truncR_imm_42 + padr_43 + padr_61;
  assign padl_25 = { { 33{ padl_bits_26[47] } }, padl_bits_26 };
  assign padl_bits_24 = padl_25;
  assign padl_23 = { { 65{ padl_bits_24[80] } }, padl_bits_24 };
  wire [146-1:0] padl_68;
  wire [81-1:0] padl_bits_69;
  wire [81-1:0] padr_70;
  wire [46-1:0] padr_bits_71;
  assign padr_bits_71 = 0;
  wire [1-1:0] toSInt_72;
  assign toSInt_72 = 0;
  wire [35-1:0] toSInt_imm_73;
  wire [34-1:0] const_74;
  assign const_74 = 34'd152587;
  assign toSInt_imm_73 = { toSInt_72, const_74 };
  assign padr_70 = { toSInt_imm_73, padr_bits_71 };
  assign padl_bits_69 = padr_70;
  assign padl_68 = { { 65{ padl_bits_69[80] } }, padl_bits_69 };
  assign truncval_22 = padl_23 * padl_68;
  assign truncR_21 = truncval_22[78:0];
  assign padl_bits_20 = truncR_21[78:66];
  wire [15-1:0] padl_bits_zero_75;
  assign padl_bits_zero_75 = 0;
  assign padl_19 = { padl_bits_zero_75, padl_bits_20 };
  assign truncR_18 = padl_19;
  assign padl_bits_17 = truncR_18[27:10];
  wire [14-1:0] padl_bits_zero_76;
  assign padl_bits_zero_76 = 0;
  assign padl_16 = { padl_bits_zero_76, padl_bits_17 };
  assign wait_time = padl_16;
  wire [35-1:0] padr_77;
  wire [20-1:0] padr_bits_78;
  assign padr_bits_78 = 0;
  wire [21-1:0] truncR_79;
  wire [21-1:0] padl_80;
  wire [19-1:0] padl_bits_81;
  wire [1-1:0] toSInt_82;
  assign toSInt_82 = 0;
  wire [19-1:0] toSInt_imm_83;
  wire [18-1:0] const_84;
  assign const_84 = 18'd216268;
  assign toSInt_imm_83 = { toSInt_82, const_84 };
  assign padl_bits_81 = toSInt_imm_83;
  assign padl_80 = { { 2{ padl_bits_81[18] } }, padl_bits_81 };
  assign truncR_79 = padl_80;
  wire [15-1:0] truncR_shift_85;
  assign truncR_shift_85 = truncR_79 >>> 6;
  wire [15-1:0] truncR_imm_86;
  assign truncR_imm_86 = (truncR_79[20])? truncR_shift_85[14:0] : truncR_79[20:6];
  assign padr_77 = { truncR_imm_86, padr_bits_78 };
  wire [13-1:0] truncR_87;
  wire [14-1:0] truncval_88;
  wire [15-1:0] toUsInt_89;
  wire [35-1:0] truncR_90;
  assign truncR_90 = o;
  wire [15-1:0] truncR_shift_91;
  assign truncR_shift_91 = truncR_90 >>> 20;
  wire [15-1:0] truncR_imm_92;
  assign truncR_imm_92 = (truncR_90[34])? truncR_shift_91[14:0] : truncR_90[34:20];
  assign toUsInt_89 = truncR_imm_92;
  assign truncval_88 = toUsInt_89[11:0];
  assign truncR_87 = truncval_88[12:0];
  wire [51-1:0] padr_93;
  wire [10-1:0] padr_bits_94;
  assign padr_bits_94 = 0;
  wire [42-1:0] truncval_95;
  wire [43-1:0] toUsInt_96;
  wire [43-1:0] padr_97;
  wire [1-1:0] padr_bits_98;
  assign padr_bits_98 = 0;
  wire [88-1:0] truncR_99;
  wire [95-1:0] truncval_100;
  wire [95-1:0] padl_101;
  wire [47-1:0] padl_bits_102;
  wire [47-1:0] padr_103;
  wire [36-1:0] padr_bits_104;
  assign padr_bits_104 = 0;
  wire [1-1:0] toSInt_105;
  assign toSInt_105 = 0;
  wire [11-1:0] toSInt_imm_106;
  assign toSInt_imm_106 = { toSInt_105, n };
  assign padr_103 = { toSInt_imm_106, padr_bits_104 };
  assign padl_bits_102 = padr_103;
  assign padl_101 = { { 48{ padl_bits_102[46] } }, padl_bits_102 };
  wire [95-1:0] padl_107;
  wire [47-1:0] padl_bits_108;
  wire [47-1:0] padl_109;
  wire [45-1:0] padl_bits_110;
  wire [45-1:0] param_111;
  assign param_111 = n_to_tau;
  assign padl_bits_110 = param_111;
  assign padl_109 = { { 2{ padl_bits_110[44] } }, padl_bits_110 };
  assign padl_bits_108 = padl_109;
  assign padl_107 = { { 48{ padl_bits_108[46] } }, padl_bits_108 };
  assign truncval_100 = padl_101 * padl_107;
  wire [88-1:0] truncval_imm_112;
  assign truncval_imm_112 = { truncval_100[94], truncval_100[86:0] };
  assign truncR_99 = truncval_imm_112;
  wire [42-1:0] truncR_shift_113;
  assign truncR_shift_113 = truncR_99 >>> 46;
  wire [42-1:0] truncR_imm_114;
  assign truncR_imm_114 = (truncR_99[87])? truncR_shift_113[41:0] : truncR_99[87:46];
  assign padr_97 = { truncR_imm_114, padr_bits_98 };
  wire [43-1:0] padl_115;
  wire [42-1:0] padl_bits_116;
  wire [1-1:0] toSInt_117;
  assign toSInt_117 = 0;
  wire [42-1:0] toSInt_imm_118;
  wire [86-1:0] truncR_119;
  wire [92-1:0] truncval_120;
  wire [92-1:0] padl_121;
  wire [46-1:0] padl_bits_122;
  wire [46-1:0] padr_123;
  wire [36-1:0] padr_bits_124;
  assign padr_bits_124 = 0;
  assign padr_123 = { p, padr_bits_124 };
  assign padl_bits_122 = padr_123;
  wire [46-1:0] padl_bits_zero_125;
  assign padl_bits_zero_125 = 0;
  assign padl_121 = { padl_bits_zero_125, padl_bits_122 };
  wire [92-1:0] padl_126;
  wire [46-1:0] padl_bits_127;
  wire [46-1:0] padl_128;
  wire [43-1:0] padl_bits_129;
  wire [43-1:0] param_130;
  assign param_130 = p_to_tau;
  assign padl_bits_129 = param_130;
  wire [3-1:0] padl_bits_zero_131;
  assign padl_bits_zero_131 = 0;
  assign padl_128 = { padl_bits_zero_131, padl_bits_129 };
  assign padl_bits_127 = padl_128;
  wire [46-1:0] padl_bits_zero_132;
  assign padl_bits_zero_132 = 0;
  assign padl_126 = { padl_bits_zero_132, padl_bits_127 };
  assign truncval_120 = padl_121 * padl_126;
  assign truncR_119 = truncval_120[85:0];
  assign toSInt_imm_118 = { toSInt_117, truncR_119[85:45] };
  assign padl_bits_116 = toSInt_imm_118;
  assign padl_115 = { { 1{ padl_bits_116[41] } }, padl_bits_116 };
  wire [43-1:0] padl_133;
  wire [42-1:0] padl_bits_134;
  wire [1-1:0] toSInt_135;
  assign toSInt_135 = 0;
  wire [42-1:0] toSInt_imm_136;
  wire [41-1:0] param_137;
  assign param_137 = const_tau;
  assign toSInt_imm_136 = { toSInt_135, param_137 };
  assign padl_bits_134 = toSInt_imm_136;
  assign padl_133 = { { 1{ padl_bits_134[41] } }, padl_bits_134 };
  assign toUsInt_96 = padr_97 + padl_115 + padl_133;
  assign truncval_95 = toUsInt_96[39:0];
  assign padr_93 = { truncval_95[40:0], padr_bits_94 };
  assign tau = padr_93;
  wire [13-1:0] truncR_138;
  wire [14-1:0] truncval_139;
  wire [15-1:0] toUsInt_140;
  wire [35-1:0] truncR_141;
  assign truncR_141 = o;
  wire [15-1:0] truncR_shift_142;
  assign truncR_shift_142 = truncR_141 >>> 20;
  wire [15-1:0] truncR_imm_143;
  assign truncR_imm_143 = (truncR_141[34])? truncR_shift_142[14:0] : truncR_141[34:20];
  assign toUsInt_140 = truncR_imm_143;
  assign truncval_139 = toUsInt_140[11:0];
  assign truncR_138 = truncval_139[12:0];
  wire [36-1:0] padl_144;
  wire [13-1:0] padl_bits_145;
  wire [36-1:0] truncR_146;
  wire [50-1:0] truncR_147;
  wire [83-1:0] truncval_148;
  wire [83-1:0] padl_149;
  wire [41-1:0] padl_bits_150;
  wire [41-1:0] padl_151;
  wire [12-1:0] padl_bits_152;
  wire [12-1:0] neg_imm_153;
  wire [15-1:0] truncR_154;
  wire [35-1:0] truncR_155;
  assign truncR_155 = o;
  wire [15-1:0] truncR_shift_156;
  assign truncR_shift_156 = truncR_155 >>> 20;
  wire [15-1:0] truncR_imm_157;
  assign truncR_imm_157 = (truncR_155[34])? truncR_shift_156[14:0] : truncR_155[34:20];
  assign truncR_154 = truncR_imm_157;
  wire [12-1:0] truncR_shift_158;
  assign truncR_shift_158 = truncR_154 >>> 3;
  wire [12-1:0] truncR_imm_159;
  assign truncR_imm_159 = (truncR_154[14])? truncR_shift_158[11:0] : truncR_154[14:3];
  assign neg_imm_153 = -truncR_imm_159;
  assign padl_bits_152 = neg_imm_153;
  assign padl_151 = { { 29{ padl_bits_152[11] } }, padl_bits_152 };
  assign padl_bits_150 = padl_151;
  assign padl_149 = { { 42{ padl_bits_150[40] } }, padl_bits_150 };
  wire [83-1:0] padl_160;
  wire [41-1:0] padl_bits_161;
  wire [41-1:0] padr_162;
  wire [7-1:0] padr_bits_163;
  assign padr_bits_163 = 0;
  wire [1-1:0] toSInt_164;
  assign toSInt_164 = 0;
  wire [34-1:0] toSInt_imm_165;
  wire [51-1:0] truncval_166;
  assign truncval_166 = 52'd2251799813685248 / tau;
  assign toSInt_imm_165 = { toSInt_164, truncval_166[32:0] };
  assign padr_162 = { toSInt_imm_165, padr_bits_163 };
  assign padl_bits_161 = padr_162;
  assign padl_160 = { { 42{ padl_bits_161[40] } }, padl_bits_161 };
  assign truncval_148 = padl_149 * padl_160;
  wire [50-1:0] truncval_imm_167;
  assign truncval_imm_167 = { truncval_148[82], truncval_148[48:0] };
  assign truncR_147 = truncval_imm_167;
  wire [36-1:0] truncR_shift_168;
  assign truncR_shift_168 = truncR_147 >>> 14;
  wire [36-1:0] truncR_imm_169;
  assign truncR_imm_169 = (truncR_147[49])? truncR_shift_168[35:0] : truncR_147[49:14];
  assign truncR_146 = truncR_imm_169;
  wire [13-1:0] truncR_shift_170;
  assign truncR_shift_170 = truncR_146 >>> 23;
  wire [13-1:0] truncR_imm_171;
  assign truncR_imm_171 = (truncR_146[35])? truncR_shift_170[12:0] : truncR_146[35:23];
  assign padl_bits_145 = truncR_imm_171;
  assign padl_144 = { { 23{ padl_bits_145[12] } }, padl_bits_145 };
  assign dvdt = padl_144;
  wire [35-1:0] padr_172;
  wire [20-1:0] padr_bits_173;
  assign padr_bits_173 = 0;
  wire [15-1:0] padr_174;
  wire [1-1:0] padr_bits_175;
  assign padr_bits_175 = 0;
  wire [14-1:0] padl_176;
  wire [12-1:0] padl_bits_177;
  wire [82-1:0] truncR_178;
  wire [152-1:0] truncval_179;
  wire [152-1:0] padl_180;
  wire [87-1:0] padl_bits_181;
  wire [87-1:0] padl_182;
  wire [52-1:0] padl_bits_183;
  wire [1-1:0] toSInt_184;
  assign toSInt_184 = 0;
  wire [52-1:0] toSInt_imm_185;
  wire [51-1:0] const_186;
  assign const_186 = 51'd225179;
  assign toSInt_imm_185 = { toSInt_184, const_186 };
  assign padl_bits_183 = toSInt_imm_185;
  assign padl_182 = { { 35{ padl_bits_183[51] } }, padl_bits_183 };
  assign padl_bits_181 = padl_182;
  assign padl_180 = { { 65{ padl_bits_181[86] } }, padl_bits_181 };
  wire [152-1:0] padl_187;
  wire [87-1:0] padl_bits_188;
  wire [87-1:0] padr_189;
  wire [51-1:0] padr_bits_190;
  assign padr_bits_190 = 0;
  assign padr_189 = { dvdt, padr_bits_190 };
  assign padl_bits_188 = padr_189;
  assign padl_187 = { { 65{ padl_bits_188[86] } }, padl_bits_188 };
  assign truncval_179 = padl_180 * padl_187;
  wire [82-1:0] truncval_imm_191;
  assign truncval_imm_191 = { truncval_179[151], truncval_179[80:0] };
  assign truncR_178 = truncval_imm_191;
  wire [12-1:0] truncR_shift_192;
  assign truncR_shift_192 = truncR_178 >>> 70;
  wire [12-1:0] truncR_imm_193;
  assign truncR_imm_193 = (truncR_178[81])? truncR_shift_192[11:0] : truncR_178[81:70];
  assign padl_bits_177 = truncR_imm_193;
  assign padl_176 = { { 2{ padl_bits_177[11] } }, padl_bits_177 };
  assign padr_174 = { padl_176, padr_bits_175 };
  assign padr_172 = { padr_174, padr_bits_173 };
  wire [32-1:0] padl_194;
  wire [2-1:0] padl_bits_195;
  wire [13-1:0] truncR_196;
  wire [13-1:0] padr_197;
  wire [1-1:0] padr_bits_198;
  assign padr_bits_198 = 0;
  wire [76-1:0] truncR_199;
  wire [144-1:0] truncval_200;
  wire [144-1:0] padl_201;
  wire [80-1:0] padl_bits_202;
  wire [80-1:0] padl_203;
  wire [47-1:0] padl_bits_204;
  wire [98-1:0] truncR_205;
  wire [105-1:0] truncval_206;
  wire [105-1:0] padl_207;
  wire [52-1:0] padl_bits_208;
  wire [52-1:0] padr_209;
  wire [41-1:0] padr_bits_210;
  assign padr_bits_210 = 0;
  wire [1-1:0] toSInt_211;
  assign toSInt_211 = 0;
  wire [11-1:0] toSInt_imm_212;
  assign toSInt_imm_212 = { toSInt_211, n };
  assign padr_209 = { toSInt_imm_212, padr_bits_210 };
  assign padl_bits_208 = padr_209;
  assign padl_207 = { { 53{ padl_bits_208[51] } }, padl_bits_208 };
  wire [105-1:0] padl_213;
  wire [52-1:0] padl_bits_214;
  wire [52-1:0] padl_215;
  wire [50-1:0] padl_bits_216;
  wire [50-1:0] param_217;
  assign param_217 = n_to_response_time_lh;
  assign padl_bits_216 = param_217;
  assign padl_215 = { { 2{ padl_bits_216[49] } }, padl_bits_216 };
  assign padl_bits_214 = padl_215;
  assign padl_213 = { { 53{ padl_bits_214[51] } }, padl_bits_214 };
  assign truncval_206 = padl_207 * padl_213;
  wire [98-1:0] truncval_imm_218;
  assign truncval_imm_218 = { truncval_206[104], truncval_206[96:0] };
  assign truncR_205 = truncval_imm_218;
  wire [47-1:0] truncR_shift_219;
  assign truncR_shift_219 = truncR_205 >>> 51;
  wire [47-1:0] truncR_imm_220;
  assign truncR_imm_220 = (truncR_205[97])? truncR_shift_219[46:0] : truncR_205[97:51];
  wire [47-1:0] padr_221;
  wire [1-1:0] padr_bits_222;
  assign padr_bits_222 = 0;
  wire [94-1:0] truncR_223;
  wire [101-1:0] truncval_224;
  wire [101-1:0] padl_225;
  wire [50-1:0] padl_bits_226;
  wire [50-1:0] padr_227;
  wire [39-1:0] padr_bits_228;
  assign padr_bits_228 = 0;
  wire [1-1:0] toSInt_229;
  assign toSInt_229 = 0;
  wire [11-1:0] toSInt_imm_230;
  assign toSInt_imm_230 = { toSInt_229, p };
  assign padr_227 = { toSInt_imm_230, padr_bits_228 };
  assign padl_bits_226 = padr_227;
  assign padl_225 = { { 51{ padl_bits_226[49] } }, padl_bits_226 };
  wire [101-1:0] padl_231;
  wire [50-1:0] padl_bits_232;
  wire [50-1:0] padl_233;
  wire [48-1:0] padl_bits_234;
  wire [48-1:0] param_235;
  assign param_235 = p_to_response_time_lh;
  assign padl_bits_234 = param_235;
  assign padl_233 = { { 2{ padl_bits_234[47] } }, padl_bits_234 };
  assign padl_bits_232 = padl_233;
  assign padl_231 = { { 51{ padl_bits_232[49] } }, padl_bits_232 };
  assign truncval_224 = padl_225 * padl_231;
  wire [94-1:0] truncval_imm_236;
  assign truncval_imm_236 = { truncval_224[100], truncval_224[92:0] };
  assign truncR_223 = truncval_imm_236;
  wire [46-1:0] truncR_shift_237;
  assign truncR_shift_237 = truncR_223 >>> 48;
  wire [46-1:0] truncR_imm_238;
  assign truncR_imm_238 = (truncR_223[93])? truncR_shift_237[45:0] : truncR_223[93:48];
  assign padr_221 = { truncR_imm_238, padr_bits_222 };
  wire [47-1:0] padr_239;
  wire [2-1:0] padr_bits_240;
  assign padr_bits_240 = 0;
  wire [45-1:0] padl_241;
  wire [44-1:0] padl_bits_242;
  wire [1-1:0] toSInt_243;
  assign toSInt_243 = 0;
  wire [44-1:0] toSInt_imm_244;
  wire [43-1:0] param_245;
  assign param_245 = const_response_time_lh;
  assign toSInt_imm_244 = { toSInt_243, param_245 };
  assign padl_bits_242 = toSInt_imm_244;
  assign padl_241 = { { 1{ padl_bits_242[43] } }, padl_bits_242 };
  assign padr_239 = { padl_241, padr_bits_240 };
  assign padl_bits_204 = truncR_imm_220 + padr_221 + padr_239;
  assign padl_203 = { { 33{ padl_bits_204[46] } }, padl_bits_204 };
  assign padl_bits_202 = padl_203;
  assign padl_201 = { { 64{ padl_bits_202[79] } }, padl_bits_202 };
  wire [144-1:0] padl_246;
  wire [80-1:0] padl_bits_247;
  wire [80-1:0] padr_248;
  wire [45-1:0] padr_bits_249;
  assign padr_bits_249 = 0;
  wire [1-1:0] toSInt_250;
  assign toSInt_250 = 0;
  wire [35-1:0] toSInt_imm_251;
  wire [34-1:0] const_252;
  assign const_252 = 34'd152587;
  assign toSInt_imm_251 = { toSInt_250, const_252 };
  assign padr_248 = { toSInt_imm_251, padr_bits_249 };
  assign padl_bits_247 = padr_248;
  assign padl_246 = { { 64{ padl_bits_247[79] } }, padl_bits_247 };
  assign truncval_200 = padl_201 * padl_246;
  assign truncR_199 = truncval_200[75:0];
  assign padr_197 = { truncR_199[75:64], padr_bits_198 };
  assign truncR_196 = padr_197;
  assign padl_bits_195 = truncR_196[12:11];
  wire [30-1:0] padl_bits_zero_253;
  assign padl_bits_zero_253 = 0;
  assign padl_194 = { padl_bits_zero_253, padl_bits_195 };
  assign wait_time_lh = padl_194;
  wire [13-1:0] truncR_254;
  wire [14-1:0] truncval_255;
  wire [15-1:0] toUsInt_256;
  wire [35-1:0] truncR_257;
  assign truncR_257 = o;
  wire [15-1:0] truncR_shift_258;
  assign truncR_shift_258 = truncR_257 >>> 20;
  wire [15-1:0] truncR_imm_259;
  assign truncR_imm_259 = (truncR_257[34])? truncR_shift_258[14:0] : truncR_257[34:20];
  assign toUsInt_256 = truncR_imm_259;
  assign truncval_255 = toUsInt_256[11:0];
  assign truncR_254 = truncval_255[12:0];
  wire [59-1:0] padr_260;
  wire [14-1:0] padr_bits_261;
  assign padr_bits_261 = 0;
  wire [46-1:0] truncval_262;
  wire [47-1:0] toUsInt_263;
  wire [47-1:0] padr_264;
  wire [3-1:0] padr_bits_265;
  assign padr_bits_265 = 0;
  wire [44-1:0] padl_266;
  wire [43-1:0] padl_bits_267;
  wire [1-1:0] toSInt_268;
  assign toSInt_268 = 0;
  wire [43-1:0] toSInt_imm_269;
  wire [88-1:0] truncR_270;
  wire [94-1:0] truncval_271;
  wire [94-1:0] padl_272;
  wire [47-1:0] padl_bits_273;
  wire [47-1:0] padr_274;
  wire [37-1:0] padr_bits_275;
  assign padr_bits_275 = 0;
  assign padr_274 = { n, padr_bits_275 };
  assign padl_bits_273 = padr_274;
  wire [47-1:0] padl_bits_zero_276;
  assign padl_bits_zero_276 = 0;
  assign padl_272 = { padl_bits_zero_276, padl_bits_273 };
  wire [94-1:0] padl_277;
  wire [47-1:0] padl_bits_278;
  wire [47-1:0] padl_279;
  wire [44-1:0] padl_bits_280;
  wire [44-1:0] param_281;
  assign param_281 = n_to_tau_lh;
  assign padl_bits_280 = param_281;
  wire [3-1:0] padl_bits_zero_282;
  assign padl_bits_zero_282 = 0;
  assign padl_279 = { padl_bits_zero_282, padl_bits_280 };
  assign padl_bits_278 = padl_279;
  wire [47-1:0] padl_bits_zero_283;
  assign padl_bits_zero_283 = 0;
  assign padl_277 = { padl_bits_zero_283, padl_bits_278 };
  assign truncval_271 = padl_272 * padl_277;
  assign truncR_270 = truncval_271[87:0];
  assign toSInt_imm_269 = { toSInt_268, truncR_270[87:46] };
  assign padl_bits_267 = toSInt_imm_269;
  assign padl_266 = { { 1{ padl_bits_267[42] } }, padl_bits_267 };
  assign padr_264 = { padl_266, padr_bits_265 };
  wire [96-1:0] truncR_284;
  wire [103-1:0] truncval_285;
  wire [103-1:0] padl_286;
  wire [51-1:0] padl_bits_287;
  wire [51-1:0] padr_288;
  wire [40-1:0] padr_bits_289;
  assign padr_bits_289 = 0;
  wire [1-1:0] toSInt_290;
  assign toSInt_290 = 0;
  wire [11-1:0] toSInt_imm_291;
  assign toSInt_imm_291 = { toSInt_290, p };
  assign padr_288 = { toSInt_imm_291, padr_bits_289 };
  assign padl_bits_287 = padr_288;
  assign padl_286 = { { 52{ padl_bits_287[50] } }, padl_bits_287 };
  wire [103-1:0] padl_292;
  wire [51-1:0] padl_bits_293;
  wire [51-1:0] padl_294;
  wire [49-1:0] padl_bits_295;
  wire [49-1:0] param_296;
  assign param_296 = p_to_tau_lh;
  assign padl_bits_295 = param_296;
  assign padl_294 = { { 2{ padl_bits_295[48] } }, padl_bits_295 };
  assign padl_bits_293 = padl_294;
  assign padl_292 = { { 52{ padl_bits_293[50] } }, padl_bits_293 };
  assign truncval_285 = padl_286 * padl_292;
  wire [96-1:0] truncval_imm_297;
  assign truncval_imm_297 = { truncval_285[102], truncval_285[94:0] };
  assign truncR_284 = truncval_imm_297;
  wire [47-1:0] truncR_shift_298;
  assign truncR_shift_298 = truncR_284 >>> 49;
  wire [47-1:0] truncR_imm_299;
  assign truncR_imm_299 = (truncR_284[95])? truncR_shift_298[46:0] : truncR_284[95:49];
  wire [47-1:0] padr_300;
  wire [2-1:0] padr_bits_301;
  assign padr_bits_301 = 0;
  wire [45-1:0] padl_302;
  wire [44-1:0] padl_bits_303;
  wire [1-1:0] toSInt_304;
  assign toSInt_304 = 0;
  wire [44-1:0] toSInt_imm_305;
  wire [43-1:0] param_306;
  assign param_306 = const_tau_lh;
  assign toSInt_imm_305 = { toSInt_304, param_306 };
  assign padl_bits_303 = toSInt_imm_305;
  assign padl_302 = { { 1{ padl_bits_303[43] } }, padl_bits_303 };
  assign padr_300 = { padl_302, padr_bits_301 };
  assign toUsInt_263 = padr_264 + truncR_imm_299 + padr_300;
  assign truncval_262 = toUsInt_263[43:0];
  assign padr_260 = { truncval_262[44:0], padr_bits_261 };
  assign tau_lh = padr_260;
  wire [33-1:0] truncR_307;
  wire [34-1:0] truncval_308;
  wire [35-1:0] toUsInt_309;
  assign toUsInt_309 = o;
  assign truncval_308 = toUsInt_309[31:0];
  assign truncR_307 = truncval_308[32:0];
  wire [37-1:0] padl_310;
  wire [13-1:0] padl_bits_311;
  wire [37-1:0] truncR_312;
  wire [97-1:0] truncR_313;
  wire [129-1:0] truncval_314;
  wire [129-1:0] padl_315;
  wire [64-1:0] padl_bits_316;
  wire [64-1:0] padl_317;
  wire [35-1:0] padl_bits_318;
  wire [35-1:0] padr_319;
  wire [14-1:0] padr_bits_320;
  assign padr_bits_320 = 0;
  wire [21-1:0] padl_321;
  wire [19-1:0] padl_bits_322;
  wire [1-1:0] toSInt_323;
  assign toSInt_323 = 0;
  wire [19-1:0] toSInt_imm_324;
  wire [18-1:0] const_325;
  assign const_325 = 18'd216268;
  assign toSInt_imm_324 = { toSInt_323, const_325 };
  assign padl_bits_322 = toSInt_imm_324;
  assign padl_321 = { { 2{ padl_bits_322[18] } }, padl_bits_322 };
  assign padr_319 = { padl_321, padr_bits_320 };
  assign padl_bits_318 = padr_319 - o;
  assign padl_317 = { { 29{ padl_bits_318[34] } }, padl_bits_318 };
  assign padl_bits_316 = padl_317;
  assign padl_315 = { { 65{ padl_bits_316[63] } }, padl_bits_316 };
  wire [129-1:0] padl_326;
  wire [64-1:0] padl_bits_327;
  wire [64-1:0] padr_328;
  wire [30-1:0] padr_bits_329;
  assign padr_bits_329 = 0;
  wire [1-1:0] toSInt_330;
  assign toSInt_330 = 0;
  wire [34-1:0] toSInt_imm_331;
  wire [59-1:0] truncval_332;
  assign truncval_332 = 60'd576460752303423488 / tau_lh;
  assign toSInt_imm_331 = { toSInt_330, truncval_332[32:0] };
  assign padr_328 = { toSInt_imm_331, padr_bits_329 };
  assign padl_bits_327 = padr_328;
  assign padl_326 = { { 65{ padl_bits_327[63] } }, padl_bits_327 };
  assign truncval_314 = padl_315 * padl_326;
  wire [97-1:0] truncval_imm_333;
  assign truncval_imm_333 = { truncval_314[128], truncval_314[95:0] };
  assign truncR_313 = truncval_imm_333;
  wire [37-1:0] truncR_shift_334;
  assign truncR_shift_334 = truncR_313 >>> 60;
  wire [37-1:0] truncR_imm_335;
  assign truncR_imm_335 = (truncR_313[96])? truncR_shift_334[36:0] : truncR_313[96:60];
  assign truncR_312 = truncR_imm_335;
  wire [13-1:0] truncR_shift_336;
  assign truncR_shift_336 = truncR_312 >>> 24;
  wire [13-1:0] truncR_imm_337;
  assign truncR_imm_337 = (truncR_312[36])? truncR_shift_336[12:0] : truncR_312[36:24];
  assign padl_bits_311 = truncR_imm_337;
  assign padl_310 = { { 24{ padl_bits_311[12] } }, padl_bits_311 };
  assign dodt = padl_310;
  wire [35-1:0] padr_338;
  wire [21-1:0] padr_bits_339;
  assign padr_bits_339 = 0;
  wire [14-1:0] padl_340;
  wire [12-1:0] padl_bits_341;
  wire [81-1:0] truncR_342;
  wire [153-1:0] truncval_343;
  wire [153-1:0] padl_344;
  wire [88-1:0] padl_bits_345;
  wire [88-1:0] padl_346;
  wire [52-1:0] padl_bits_347;
  wire [1-1:0] toSInt_348;
  assign toSInt_348 = 0;
  wire [52-1:0] toSInt_imm_349;
  wire [51-1:0] const_350;
  assign const_350 = 51'd225179;
  assign toSInt_imm_349 = { toSInt_348, const_350 };
  assign padl_bits_347 = toSInt_imm_349;
  assign padl_346 = { { 36{ padl_bits_347[51] } }, padl_bits_347 };
  assign padl_bits_345 = padl_346;
  assign padl_344 = { { 65{ padl_bits_345[87] } }, padl_bits_345 };
  wire [153-1:0] padl_351;
  wire [88-1:0] padl_bits_352;
  wire [88-1:0] padr_353;
  wire [51-1:0] padr_bits_354;
  assign padr_bits_354 = 0;
  assign padr_353 = { dodt, padr_bits_354 };
  assign padl_bits_352 = padr_353;
  assign padl_351 = { { 65{ padl_bits_352[87] } }, padl_bits_352 };
  assign truncval_343 = padl_344 * padl_351;
  wire [81-1:0] truncval_imm_355;
  assign truncval_imm_355 = { truncval_343[152], truncval_343[79:0] };
  assign truncR_342 = truncval_imm_355;
  wire [12-1:0] truncR_shift_356;
  assign truncR_shift_356 = truncR_342 >>> 69;
  wire [12-1:0] truncR_imm_357;
  assign truncR_imm_357 = (truncR_342[80])? truncR_shift_356[11:0] : truncR_342[80:69];
  assign padl_bits_341 = truncR_imm_357;
  assign padl_340 = { { 2{ padl_bits_341[11] } }, padl_bits_341 };
  assign padr_338 = { padl_340, padr_bits_339 };
  assign out = (fsm == 0)? truncR_10[12:3] : truncR_87[12:3];

  always @(posedge clk) begin
    prev_sys_clk <= sys_clk;
  end

  localparam fsm_1 = 1;
  localparam fsm_2 = 2;
  localparam fsm_3 = 3;
  localparam fsm_4 = 4;

  always @(posedge clk) begin
    if(reset) begin
      fsm <= fsm_init;
    end else begin
      case(fsm)
        fsm_init: begin
          if(reset) begin
            o <= 35'd3543348019;
          end else begin
            o <= padr_0;
          end
          if(~prev_sys_clk & sys_clk & ((n > p) & (n <= 10'd512))) begin
            fsm <= fsm_1;
          end 
        end
        fsm_1: begin
          if(reset) begin
            o <= 35'd3543348019;
          end else begin
            o <= padr_77;
          end
          if(state_cycle_counter > wait_time) begin
            state_cycle_counter <= 0;
          end else begin
            state_cycle_counter <= state_cycle_counter + 1;
          end
          if(state_cycle_counter > wait_time) begin
            fsm <= fsm_2;
          end 
        end
        fsm_2: begin
          if(reset) begin
            o <= 35'd3543348019;
          end else begin
            o <= o + padr_172;
          end
          if(prev_sys_clk & ~sys_clk) begin
            fsm <= fsm_3;
          end 
        end
        fsm_3: begin
          if(state_cycle_counter > wait_time_lh) begin
            state_cycle_counter <= 0;
          end else begin
            state_cycle_counter <= state_cycle_counter + 1;
          end
          if(state_cycle_counter > wait_time_lh) begin
            fsm <= fsm_4;
          end 
        end
        fsm_4: begin
          if(reset) begin
            o <= 35'd3543348019;
          end else begin
            o <= o + padr_338;
          end
          if((o > 35'd3532610600) & (o <= 35'd17179869184)) begin
            fsm <= fsm_init;
          end 
        end
      endcase
    end
  end


endmodule




`line 2 "sar_adc.v" 0
`line 1 "./digital_to_analog_converter.v" 0


module digital_to_analog_converter
(
  input clk,
  input reset,
  input [10-1:0] input_voltage_digital,
  output [10-1:0] output_voltage_real
);

  wire [10-1:0] padr_0;
  wire [1-1:0] padr_bits_1;
  assign padr_bits_1 = 0;
  wire [9-1:0] padl_2;
  wire [8-1:0] padl_bits_3;
  wire [28-1:0] truncR_4;
  wire [52-1:0] truncval_5;
  wire [52-1:0] padl_6;
  wire [26-1:0] padl_bits_7;
  wire [26-1:0] padr_8;
  wire [13-1:0] padr_bits_9;
  assign padr_bits_9 = 0;
  wire [1-1:0] toSInt_10;
  assign toSInt_10 = 0;
  wire [13-1:0] toSInt_imm_11;
  wire [34-1:0] truncR_12;
  wire [42-1:0] truncval_13;
  wire [42-1:0] padl_14;
  wire [21-1:0] padl_bits_15;
  wire [21-1:0] padl_16;
  wire [13-1:0] padl_bits_17;
  wire [13-1:0] const_18;
  assign const_18 = 13'd6758;
  assign padl_bits_17 = const_18;
  wire [8-1:0] padl_bits_zero_19;
  assign padl_bits_zero_19 = 0;
  assign padl_16 = { padl_bits_zero_19, padl_bits_17 };
  assign padl_bits_15 = padl_16;
  wire [21-1:0] padl_bits_zero_20;
  assign padl_bits_zero_20 = 0;
  assign padl_14 = { padl_bits_zero_20, padl_bits_15 };
  wire [42-1:0] padl_21;
  wire [21-1:0] padl_bits_22;
  wire [21-1:0] padr_23;
  wire [11-1:0] padr_bits_24;
  assign padr_bits_24 = 0;
  assign padr_23 = { input_voltage_digital, padr_bits_24 };
  assign padl_bits_22 = padr_23;
  wire [21-1:0] padl_bits_zero_25;
  assign padl_bits_zero_25 = 0;
  assign padl_21 = { padl_bits_zero_25, padl_bits_22 };
  assign truncval_13 = padl_14 * padl_21;
  assign truncR_12 = truncval_13[33:0];
  assign toSInt_imm_11 = { toSInt_10, truncR_12[33:22] };
  assign padr_8 = { toSInt_imm_11, padr_bits_9 };
  assign padl_bits_7 = padr_8;
  assign padl_6 = { { 26{ padl_bits_7[25] } }, padl_bits_7 };
  wire [52-1:0] padl_26;
  wire [26-1:0] padl_bits_27;
  wire [26-1:0] padl_28;
  wire [15-1:0] padl_bits_29;
  wire [15-1:0] const_30;
  assign const_30 = 15'd8;
  assign padl_bits_29 = const_30;
  assign padl_28 = { { 11{ padl_bits_29[14] } }, padl_bits_29 };
  assign padl_bits_27 = padl_28;
  assign padl_26 = { { 26{ padl_bits_27[25] } }, padl_bits_27 };
  assign truncval_5 = padl_6 * padl_26;
  assign truncR_4 = truncval_5[27:0];
  assign padl_bits_3 = truncR_4[27:20];
  wire [1-1:0] padl_bits_zero_31;
  assign padl_bits_zero_31 = 0;
  assign padl_2 = { padl_bits_zero_31, padl_bits_3 };
  assign padr_0 = { padl_2, padr_bits_1 };
  assign output_voltage_real = padr_0;

endmodule


`line 3 "sar_adc.v" 0
`line 1 "./sample_and_hold.v" 0


module sample_and_hold
(
  input clk,
  input reset,
  input sys_clk,
  input [10-1:0] input_voltage_real,
  output [10-1:0] output_voltage_real,
  input [1-1:0] input_control_digital
);

  reg [4-1:0] state_cycle_counter;
  reg [1-1:0] prev_sys_clk;
  reg [10-1:0] state_cap;
  reg [32-1:0] fsm;
  localparam fsm_init = 0;
  assign output_voltage_real = state_cap;

  always @(posedge clk) begin
    prev_sys_clk <= sys_clk;
  end

  localparam fsm_1 = 1;

  always @(posedge clk) begin
    if(reset) begin
      fsm <= fsm_init;
    end else begin
      case(fsm)
        fsm_init: begin
          if(reset) begin
            state_cap <= 10'd0;
          end else begin
            state_cap <= input_voltage_real;
          end
          if(input_control_digital) begin
            fsm <= fsm_1;
          end 
        end
        fsm_1: begin
          if(reset) begin
            state_cap <= 10'd0;
          end else begin
            state_cap <= state_cap;
          end
          if(!input_control_digital) begin
            fsm <= fsm_init;
          end 
        end
      endcase
    end
  end


endmodule


`line 4 "sar_adc.v" 0
`line 1 "./successive_approximation_register.v" 0

module successive_approximation_register #(
    parameter N_BITS = 10
)
(
    input  logic feedback_value,
    input  logic conduct_comparison,

    output logic [N_BITS - 1:0] quantized_voltage,
    output logic               eoc,

    input logic sys_clk,
    input logic reset
);

logic [$clog2(N_BITS):0] counter;

//need to double buffer the output becaues tecnically the SAR outputs a 1
// for the bit under comparison
logic[N_BITS - 1:0] quantized_voltage_register;

always@(posedge sys_clk) begin
    if(reset) begin
        counter <= 0;
    end else if(conduct_comparison) begin
        if(counter != N_BITS * 2 - 1) counter <= counter + 1;
        else counter <= 0;
    end
end

always@(posedge sys_clk) begin
    if(reset || !conduct_comparison) begin
        quantized_voltage_register <= 0;
    end else begin 
        quantized_voltage_register[(N_BITS - counter/2) - 1] <= feedback_value;
    end
end

always@(*) begin
    int i;
    for(i=0;i<N_BITS;i++) begin
        quantized_voltage[i] = ((N_BITS - counter/2) - 1 == i) ? 1:quantized_voltage_register[i];
    end
end

assign eoc = (counter == N_BITS * 2 - 1) && !reset;


endmodule
`line 5 "sar_adc.v" 0


module sar_adc 
#(
    parameter N_BITS = 10 
)
(

    input logic [9:0] input_voltage_real,
    
    input logic input_hold_digital,

    output logic eoc,
    output logic [10 - 1:0] output_result_digital,


    input logic clk,
    input logic sys_clk,
    input logic reset
);

logic [9:0] p_voltage_real;
logic [9:0] n_voltage_real;

logic [9:0] comparator_output_real;
logic       comparator_output_digital;

sample_and_hold sah
(
  .clk(clk),
  .reset(reset),
  .sys_clk(sys_clk),
  .input_voltage_real(input_voltage_real),
  .output_voltage_real(p_voltage_real),
  .input_control_digital(input_hold_digital)
);

logic [9:0] output_result_digital_prescale;
assign output_result_digital = {output_result_digital_prescale,{10-N_BITS{1'b0}}};
successive_approximation_register #(
    .N_BITS(N_BITS)
) SAR_instance (
    .feedback_value(comparator_output_digital), 
    .quantized_voltage(output_result_digital_prescale),
    .conduct_comparison(input_hold_digital),
    .eoc(eoc), 
    .sys_clk(sys_clk), 
    .reset(reset) 
);

logic [9:0] input_voltage_dac_shift;
assign input_voltage_dac_shift = output_result_digital;

digital_to_analog_converter DAC_instance (
    .clk(clk), 
    .reset(reset), 
    .input_voltage_digital(input_voltage_dac_shift), 
    .output_voltage_real(n_voltage_real) 
);

comparator_latch comparator_instance (
    .clk(clk),              
    .reset(reset),            
    .sys_clk(sys_clk),          
    .p(p_voltage_real),   
    .n(n_voltage_real),   
    .out(comparator_output_real)       
);



//D-Latch to make the comparator latch a comparator flip-flop!

always@(posedge clk) begin
    if(reset) begin
        comparator_output_digital <= 0;
    end else if(sys_clk != 1) begin
        comparator_output_digital <= comparator_output_real > 211; //0.5VDD
    end
end

endmodule
`endif /* SAR_ADC */
//-----------------------------------------------------------
// Wrapper of placeholder sar_adc__N_BITS_10
//-----------------------------------------------------------

`ifndef SAR_ADC__N_BITS_10
`define SAR_ADC__N_BITS_10

module sar_adc__N_BITS_10
#(
  parameter N_BITS = 10
)
(
  input logic [1-1:0] clk ,
  output logic [1-1:0] eoc ,
  input logic [1-1:0] input_hold_digital ,
  input logic [10-1:0] input_voltage_real ,
  output logic [10-1:0] output_result_digital ,
  input logic [1-1:0] reset ,
  input logic [1-1:0] sys_clk 
);
  sar_adc
  #(
    .N_BITS( N_BITS )
  ) v
  (
    .clk( clk ),
    .eoc( eoc ),
    .input_hold_digital( input_hold_digital ),
    .input_voltage_real( input_voltage_real ),
    .output_result_digital( output_result_digital ),
    .reset( reset ),
    .sys_clk( sys_clk )
  );
endmodule

`endif /* SAR_ADC__N_BITS_10 */

